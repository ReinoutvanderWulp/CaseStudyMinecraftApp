<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mighty</name>
    </assembly>
    <members>
        <member name="T:Mighty.AutoMap">
            <summary>
            Controls whether `keys`, `columns` and `orderBy` inputs are automatically mapped, if any fields or
            properties have been renamed by column mapping settings (see Mighty documentation).
            (If you are not using auto-mapping, you can manually use <see cref="T:Mighty.MightyOrm"/>.<see cref="M:Mighty.DataContracts.DataContract.Map(System.String,Mighty.AutoMap)"/>
            to conveniently re-map one or more field or property names to column names for SQL fragments which
            you are passing in to Mighty.)
            </summary>
        </member>
        <member name="F:Mighty.AutoMap.Off">
            <summary>
            Do not remap anything
            </summary>
        </member>
        <member name="F:Mighty.AutoMap.Keys">
            <summary>
            Remap `keyNames` parameter (for <see cref="T:Mighty.MightyOrm"/> and <see cref="T:Mighty.MightyOrm`1"/> constructors only)
            </summary>
        </member>
        <member name="F:Mighty.AutoMap.Columns">
            <summary>
            Remap `columns` parameter (for <see cref="T:Mighty.MightyOrm"/> and <see cref="T:Mighty.MightyOrm`1"/> constructors and all other methods which accept it)
            </summary>
        </member>
        <member name="F:Mighty.AutoMap.OrderBy">
            <summary>
            Remap `orderBy` parameter (for all methods which accept it)
            </summary>
        </member>
        <member name="F:Mighty.AutoMap.Value">
            <summary>
            Remap `valueName` parameter (for <see cref="T:Mighty.MightyOrm"/> and <see cref="T:Mighty.MightyOrm`1"/> constructors only)
            </summary>
        </member>
        <member name="F:Mighty.AutoMap.On">
            <summary>
            Remap everything (i.e. `keys`, `columns` and `orderBy` parameters to <see cref="T:Mighty.MightyOrm"/>
            and <see cref="T:Mighty.MightyOrm`1"/> constructors and all other methods which accept them)
            </summary>
        </member>
        <member name="T:Mighty.ConnectionProviders.ConnectionProvider">
            <summary>
            Implement this abstract class and then register the <see cref="T:System.Type"/> of your implementation with <see cref="T:Mighty.Plugins.PluginManager"/>
            in order to provide support for any currently unsupported database type in Mighty.
            </summary>
        </member>
        <member name="P:Mighty.ConnectionProviders.ConnectionProvider.ProviderFactoryInstance">
            <summary>
            Specify the <see cref="T:System.Data.Common.DbProviderFactory"/> which database access going via this connection provider should use.
            </summary>
        </member>
        <member name="P:Mighty.ConnectionProviders.ConnectionProvider.DatabasePluginType">
            <summary>
            Specify which database plugin class to use, for all the various bits of Mighty which have been found to
            vary between database providers. This must be an instance of <see cref="T:Mighty.Plugins.PluginBase"/>).
            </summary>
        </member>
        <member name="P:Mighty.ConnectionProviders.ConnectionProvider.ConnectionString">
            <summary>
            Specify the connection string to use when instantiating a <see cref="T:System.Data.Common.DbConnection"/> via this connection provider;
            this might typically be (or be derived from) the connection string provided to the constructor of this class.
            </summary>
        </member>
        <member name="M:Mighty.ConnectionProviders.ConnectionProvider.Init(System.String)">
            <summary>
            Fluent API, must return `this` at the end. It should set all three public properties of this class.
            (You may ignore connectionStringOrName input here if appropriate, in which case you
            would pass null as the connectionStringOrName value to the <see cref="T:Mighty.MightyOrm"/> constructor.)
            </summary>
            <param name="connectionStringOrName">
            A connection provider will typically either be passed either a connection string
            or a name by which a connection string can be looked up elsewhere. (But note that your
            connection provider can just ignore this input parameter if it needs to.)
            </param>
            <returns></returns>
        </member>
        <member name="T:Mighty.Cursor">
            <summary>
            Mighty-specific support for database cursors (only for use on those providers on which passing a cursor out to external code makes sense).
            </summary>
        </member>
        <member name="P:Mighty.Cursor.CursorRef">
            <summary>
            The cursor ref for the underlying ADO.NET database provider
            </summary>
        </member>
        <member name="M:Mighty.Cursor.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">
            When the cursor is an input parameter, this should be the database-specific cursor reference obtained from a previous database command.
            When the cursor is an output parameter, omit this parameter.
            </param>
        </member>
        <member name="M:Mighty.Cursor.ToString">
            <summary>
            String representation of the type of this object and what it contains
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mighty.DatabaseColumnAttribute">
            <summary>
            Specify that this field or property should be included in database operations even if non-public.
            Optionally provide a database name for the underlying column.
            Optionally specify that this field or property should be used for data reads or writes only.
            </summary>
        </member>
        <member name="F:Mighty.DatabaseColumnAttribute.Name">
            <summary>
            The database column name
            </summary>
        </member>
        <member name="F:Mighty.DatabaseColumnAttribute.Direction">
            <summary>
            Whether data should be read from or writtten to the database for this column
            </summary>
            <remarks>
            Zero means no checks and only any restrictions on the underlying data member will apply
            </remarks>
        </member>
        <member name="F:Mighty.DatabaseColumnAttribute.Transform">
            <summary>
            The transform SQL
            </summary>
        </member>
        <member name="M:Mighty.DatabaseColumnAttribute.#ctor(System.String,Mighty.DataDirection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">
            The database column name;
            setting this turns on auto-mapping of `keys`, `columns` and `orderBy` inputs to Mighty by default;
            to disable that apply [<see cref="T:Mighty.DatabaseTableAttribute"/>(autoMap: <see cref="F:Mighty.AutoMap.Off"/>)] to the class.
            </param>
            <param name="direction">Experimental: The database column direction</param>
            <param name="sqlTransform">Experimental: In auto-generated SQL the column will selected as "{<paramref name="sqlTransform"/>} AS {<paramref name="name"/>}"</param>
        </member>
        <member name="T:Mighty.DatabaseIgnoreAttribute">
            <summary>
            This data member should be ignored when reading from and writing to the database.
            </summary>
        </member>
        <member name="T:Mighty.DatabasePrimaryKeyAttribute">
            <summary>
            Specifies that this data member is a primary key. Compound - multiple - primary keys are supported.
            </summary>
        </member>
        <member name="T:Mighty.DatabaseTableAttribute">
            <summary>
            Specify the database name for the underlying table.
            </summary>
        </member>
        <member name="P:Mighty.DatabaseTableAttribute.TableName">
            <summary>
            The underlying table name.
            </summary>
        </member>
        <member name="P:Mighty.DatabaseTableAttribute.AutoMap">
            <summary>
            The auto-map setting
            </summary>
        </member>
        <member name="P:Mighty.DatabaseTableAttribute.CaseSensitiveColumnMapping">
            <summary>
            The case-sensitivity setting
            </summary>
        </member>
        <member name="M:Mighty.DatabaseTableAttribute.#ctor(System.String,System.Boolean,Mighty.AutoMap)">
            <summary>
            Constructor
            </summary>
            <param name="name">Database table name for the underlying table</param>
            <param name="caseSensitiveColumnMapping">Should Mighty be case sensitive when mapping from field and property names to database names?</param>
            <param name="autoMap">Should Mighty automatically remap any `keys`, `columns` or `orderBy` inputs it receives, if one or more column names have been remapped?</param>
        </member>
        <member name="M:Mighty.DatabaseTableAttribute.GetHashCode">
            <summary>
            Override the hash code for the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.DatabaseTableAttribute.Equals(System.Object)">
            <summary>
            Override equality for the class
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mighty.DataContracts.DataContract">
            <summary>
            Holds the data persistence contract for a given type in Mighty.
            This contract depends on the item type, the columns paramater and the specified data mapping.
            </summary>
            <remarks>
            It should always be possible to use `columns` for quick'n'dirty column mapping as in original
            Massive i.e. "film_id AS FilmId" etc.
            
            Also New and Query are always driven by database column names. New is a special kind of data read, in this sense. So, db->field name mapping.
            
            All data writes are always driven by the field/property names of the to-be-written data. So, field->db name mapping.
            
            In the case of generic instances of Mighty:
              - We always have a class, and we always create a map for *all* columns in the class
              - The `columns` parameter just determines the default columns in a select (and can still be quick'n'dirty as above)
                o If you do a *different* select (not the default columns) then all managed columns which come back in the results are updated in the object
                  (regardless of the initial `columns` value; we can't really filter on columns because we don't want to parse it)
                o When you do New() all managed columns which come back in the table meta-data are updated
            
            In the case of dynamic instances of Mighty:
              - You cannot override any of the column mapping features of this mapper (you will get an exception if you do)
              - You can still use quick'n'dirty mapping - see above
                o If you do a query all returned fields are updated (regardless of the initial `columns` value)
                o When you do New() all columns which are in the table meta-data are updated (you can't control this)
                
            Remember, Mighty *never* parses the SQL fragments which the user sends in! It's been a pain to get this to a consistent state where it
            doesn't need to, but the result is better.
            </remarks>
        </member>
        <member name="P:Mighty.DataContracts.DataContract.Key">
            <summary>
            The info about what this is a data contract for
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContract.ReadColumns">
            <summary>
            All data read columns in one string (mapping, if any, already applied), or null
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContract.KeyColumns">
            <summary>
            All primary key fields in one string, or null
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContract.AutoMapSettings">
            <summary>
            The final auto-map setting, after taking into account whether any columns were in fact renamed.
            Left at zero if nothing was renamed, since the remap in that case is the identity, and not
            re-mapping allows other hacky but useful uses of all the inputs.
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContract.ColumnNameToMemberInfo">
            <summary>
            The reflected <see cref="T:System.Reflection.MemberInfo"/> corresponding to all specified columns in the database table
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContract.MemberNameToColumnName">
            <summary>
            The reverse mapping for all specified columns in the database table
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.#ctor(Mighty.DataContracts.DataContractKey)">
            <summary>
            Create a new data contract corresponding to the values in the key
            </summary>
            <param name="Key">All the items on which the contract depends</param>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.AddReflectedColumns(System.Boolean@,System.Boolean@,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Mighty.DataContracts.DataContractKey,System.Reflection.BindingFlags)">
            <summary>
            Include reflected columns
            </summary>
            <param name="foundControlledColumn"></param>
            <param name="foundRenamedColumn"></param>
            <param name="ReadColumnList"></param>
            <param name="KeyColumnsList"></param>
            <param name="key"></param>
            <param name="bindingFlags"></param>
            <returns>Whether a controlled column (<see cref="T:Mighty.DatabaseColumnAttribute"/> or <see cref="T:Mighty.DatabaseIgnoreAttribute"/>) was found</returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.AddReflectedColumn(System.Boolean@,System.Boolean@,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Mighty.DataContracts.DataContractKey,System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>
            Add a reflected field to the column list
            </summary>
            <param name="foundControlledColumn"></param>
            <param name="foundRenamedColumn"></param>
            <param name="ReadColumnList"></param>
            <param name="KeyColumnsList"></param>
            <param name="key"></param>
            <param name="member"></param>
            <param name="name"></param>
            <param name="include">The initial default include status (depending on public, non-public or columns-driven)</param>
            <returns>Whether a controlled column (<see cref="T:Mighty.DatabaseColumnAttribute"/> or <see cref="T:Mighty.DatabaseIgnoreAttribute"/>) was found</returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.IsMightyColumn(System.String)">
            <summary>
            Is this column managed by Mighty?
            </summary>
            <param name="columnName">The database column name</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.GetDataMemberInfo(System.String,System.String)">
            <summary>
            Get data member info for column name.
            </summary>
            <param name="columnName">The database column name</param>
            <param name="what">Brief description of what is being looked for</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.TryGetDataMemberName(System.String,System.String@,Mighty.DataDirection)">
            <summary>
            Try to get data member name for column name.
            </summary>
            <param name="columnName">The database column name</param>
            <param name="memberName">The data member name</param>
            <param name="dataDirection">The required data direction (only non-zero is tested)</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.TryGetDataMemberInfo(System.String,Mighty.DataContracts.DataContractMemberInfo@,Mighty.DataDirection)">
            <summary>
            Try to get data member info for column name.
            </summary>
            <param name="columnName">The database column name</param>
            <param name="memberInfo">The data member info</param>
            <param name="dataDirection">The required data direction (only non-zero is tested)</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.TryGetColumnName(System.String,System.String@)">
            <summary>
            Try to convert member name to column name (respecting all attribute and mapper mappings)
            </summary>
            <param name="memberName">The local data item field or property name</param>
            <param name="columnName">The matching database column name</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.TryGetDataMemberInfo(System.String,Mighty.DataContracts.DataContractMemberInfo@)">
            <summary>
            Look up <see cref="T:Mighty.DataContracts.DataContractMemberInfo"/> from database column name
            </summary>
            <param name="columnName">The database column name</param>
            <param name="memberInfo">The data member info</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.GetHashCode">
            <summary>
            Equals if <see cref="T:Mighty.DataContracts.DataContractKey"/> is equal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.Equals(System.Object)">
            <summary>
            Equals if <see cref="T:Mighty.DataContracts.DataContractKey"/> is equal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.GetMember(System.String,System.String)">
            <summary>
            Get field or property based on C# field or property name.
            Not a hashed lookup, so should not be used frequently.
            This will search in all and only managed data members, including managed non-public members,
            which is what we want.
            </summary>
            <param name="fieldName">Name of field or property</param>
            <param name="what">Short description of what is being looked for, for exception message</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.Map(System.String)">
            <summary>
            Return database column name from field or property name
            </summary>
            <param name="fieldName">The field or property name</param>
            <returns>The database column name</returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.Map(System.String,Mighty.AutoMap)">
            <summary>
            Return database column name from field or property name
            </summary>
            <param name="fieldName">The field or property name</param>
            <param name="which">
            Which type of matching is this?
            Only relevant to allow very basic additional handing of orderBy ASC and DESC.
            </param>
            <returns>The database column name</returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.Map(Mighty.AutoMap,System.String)">
            <summary>
            Map a comma-separated list of field names to column names,
            or leave alone if the mapping implies that they are already column names.
            </summary>
            <param name="which">Which type of thing is this? Checked against the current columns data contract
            to decide whether to actually map. Or send <see cref="F:Mighty.AutoMap.On"/> to map unconditionally.</param>
            <param name="fieldNames">The incoming field names</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.ReverseMap(System.String)">
            <summary>
            Return field or property name from database column name
            </summary>
            <param name="columnName">The database column name</param>
            <returns>The field or property name</returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.ReverseMap(Mighty.AutoMap,System.String)">
            <summary>
            Map a comma-separated list of column names to field names,
            or leave alone if the mapping implies that they are already field names.
            </summary>
            <param name="which">Which type of thing is this? Checked against the current columns data contract
            to decide whether to actually map. Or send <see cref="F:Mighty.AutoMap.On"/> to map unconditionally.</param>
            <param name="columnNames">The incoming column names</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContract.IsManagedGenericType(System.Object)">
            <summary>
            Returns true if this is an instance or sublass of <see cref="T:Mighty.MightyOrm`1"/> and <paramref name="item"/> is of type T.
            </summary>
            <param name="item">The object to check</param>
            <returns></returns>
        </member>
        <member name="T:Mighty.DataContracts.DataContractKey">
            <summary>
            A data contract key (unique identifier);
            all of the values on which a <see cref="T:Mighty.DataContracts.DataContract"/> depends.
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.IsGeneric">
            <summary>
            Is this a dynamic instance?
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.DataItemType">
            <summary>
            The data item type (which will always be null for the unique columns contract for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.DynamicColumnSpec">
            <summary>
            The columns spec, but only when this is actually driving the columns to use on a dynamic object
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.HasMapperColumnsMapping">
            <summary>
            Does this contract have a column mapping?
            </summary>
            <remarks>
            Not needed as part of the key's hashcode, since it is derived.
            Storing this saves some hashing if there is 'no' mapping (i.e. the default mapping fns. only). It is also
            used to determine whether a columns spec is mandatory for a dynamic instance of Mighty (it is when this is <c>true</c>).
            </remarks>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.DatabaseTableSettings">
            <summary>
            The user-supplied <see cref="T:Mighty.DatabaseTableAttribute"/> settings for the data item type;
            or the same settings but derived by calling the user-supplied mapper if no such user-supplied attribute;
            or the same settings but from the default mapper if no such user-supplied mapper!
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.ColumnName">
            <summary>
            The column name mapping
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.ColumnDataDirection">
            <summary>
            The column data-direction mapping
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.IgnoreColumn">
            <summary>
            The column ignmore mapping
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractKey.DynamicNullContract">
            <summary>
            When the instance of Mighty is dynamic and there is no column spec, then there is no need
            to store a mapping.
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.DataContractKey.#ctor(System.Boolean,System.Type,System.String,Mighty.Mapping.SqlNamingMapper)">
            <summary>
            Constructor
            </summary>
            <param name="isGeneric"></param>
            <param name="type"></param>
            <param name="columns"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Mighty.DataContracts.DataContractKey.NormaliseColumns(System.String)">
            <summary>
            Normalise - trim and sort - column names to improve caching
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContractKey.GetHashCode">
            <summary>
            Get the hash code for this key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContractKey.Equals(System.Object)">
            <summary>
            Define equality between keys
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Mighty.DataContracts.DataContractMemberInfo">
            <summary>
            Store reflected field or property, with info about whether Mighty should be reading or writing it.
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractMemberInfo.DeclaringType">
            <summary>
            The data member's parent type
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractMemberInfo.MemberType">
            <summary>
            The data member's type
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractMemberInfo.Field">
            <summary>
            The field if this is wrapping <see cref="T:System.Reflection.FieldInfo"/>
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractMemberInfo.Property">
            <summary>
            The property if this is wrapping <see cref="T:System.Reflection.PropertyInfo"/>
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractMemberInfo.Member">
            <summary>
            The data member which this is wrapping (always either <see cref="T:System.Reflection.PropertyInfo"/> or <see cref="T:System.Reflection.FieldInfo"/>)
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractMemberInfo.DataDirection">
            <summary>
            Whether Mighty should try to read data from or write data to the database for this column
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractMemberInfo.Name">
            <summary>
            The data member name
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractMemberInfo._Name">
            <summary>
            The 'field' name for a columns driven dynamic object
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.DataContractMemberInfo.#ctor(System.Type,System.Reflection.MemberInfo,System.String,Mighty.DataDirection)">
            <summary>
            Constructor
            </summary>
            <param name="Type"></param>
            <param name="DataMember"></param>
            <param name="Name"></param>
            <param name="DataDirection"></param>
        </member>
        <member name="M:Mighty.DataContracts.DataContractMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the reflected field or property in the specified object
            </summary>
            <param name="obj">The object to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Mighty.DataContracts.DataContractMemberInfo.GetValue(System.Object)">
            <summary>
            Return the value of the reflected field or property in the specified object
            </summary>
            <param name="obj">The object to read from</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.DataContracts.DataContractMemberInfo.ToString">
            <summary>
            Create string representation of this type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mighty.DataContracts.DataContractStore">
            <summary>
            <see cref="T:Mighty.DataContracts.DataContract"/> store.
            Designed to be used as a singleton instance.
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractStore.lazy">
            <summary>
            Lazy initialiser
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractStore.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.DataContractStore.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.DataContractStore.store">
            <summary>
            The store
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractStore.CacheSize">
            <summary>
            Cache size
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractStore.CacheHits">
            <summary>
            Cache hits
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.DataContractStore.CacheMisses">
            <summary>
            Cache hits
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.DataContractStore.Get(System.Boolean,System.Type,System.String,Mighty.Mapping.SqlNamingMapper)">
            <summary>
            Get (from store, or creating the first time it is needed) data contract for the type, columns spec and data mapper.
            </summary>
            <param name="IsGeneric"></param>
            <param name="type"></param>
            <param name="columns"></param>
            <param name="mapper"></param>
            <returns></returns>
            <remarks>
            In theory, mapping depends on Plugin, Factory, and ConnectionString as well;
            in practice, including those would make it much harder to provide the very useful
            <see cref="M:Mighty.DataContracts.DataContract.Map(System.String)"/> feature.
            I think it seems (more or less?) reasonable to suppose that any one class will only
            be read from and written one database with one mapping at a time? In fact, since
            Mighty only supports one mapping per class, maybe this is effectively enforced anyway?
            </remarks>
        </member>
        <member name="T:Mighty.DataContracts.TableMetaDataKey">
            <summary>
            A data contract key (unique identifier);
            all of the values on which a <see cref="F:Mighty.DataContracts.TableMetaDataKey.DataContract"/> depends.
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataKey.Plugin">
            <summary>
            The database plugin in use
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataKey.Factory">
            <summary>
            The db provider factory
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataKey.ConnectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataKey.BareTableName">
            <summary>
            BareTableName
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataKey.TableOwner">
            <summary>
            TableOwner
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataKey.DataContract">
            <summary>
            DataContract
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.TableMetaDataKey.#ctor(Mighty.Plugins.PluginBase,System.Data.Common.DbProviderFactory,System.String,System.String,System.String,Mighty.DataContracts.DataContract)">
            <summary>
            Constructor
            </summary>
            <param name="Plugin"></param>
            <param name="Factory"></param>
            <param name="ConnectionString"></param>
            <param name="BareTableName"></param>
            <param name="TableOwner"></param>
            <param name="DataContract"></param>
        </member>
        <member name="M:Mighty.DataContracts.TableMetaDataKey.GetHashCode">
            <summary>
            Get the hash code for this key
            </summary>
            <returns></returns>
            <remarks>
            Other plugins of the same type are the same plugin, but user data mappers of the
            same type are not necessarily the same data mapper.
            </remarks>
        </member>
        <member name="M:Mighty.DataContracts.TableMetaDataKey.Equals(System.Object)">
            <summary>
            Define equality between keys
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            Other plugins of the same type are the same plugin, but user data mappers of the
            same type are not necessarily the same data mapper.
            </remarks>
        </member>
        <member name="T:Mighty.DataContracts.TableMetaDataStore">
            <summary>
            Cache table meta data so we don't do loads of unecessary lookups
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataStore.lazy">
            <summary>
            Lazy initialiser
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.TableMetaDataStore.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.TableMetaDataStore.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="F:Mighty.DataContracts.TableMetaDataStore.store">
            <summary>
            The store
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.TableMetaDataStore.CacheSize">
            <summary>
            Cache size
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.TableMetaDataStore.CacheHits">
            <summary>
            Cache hits
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.TableMetaDataStore.SyncCacheHits">
            <summary>
            Sync cache hits
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.TableMetaDataStore.CacheMisses">
            <summary>
            Cache misses
            </summary>
        </member>
        <member name="P:Mighty.DataContracts.TableMetaDataStore.SyncCacheMisses">
            <summary>
            Sync cache misses
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.TableMetaDataStore.Flush">
            <summary>
            Remove all stored table meta-data
            </summary>
        </member>
        <member name="M:Mighty.DataContracts.TableMetaDataStore.FilterTableMetaData(Mighty.DataContracts.TableMetaDataKey,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            We drive creating new objects by the table meta-data list, but we only want to add columns which are actually
            specified for this instance of Mighty
            </summary>
            <param name="key">The info needed to create the meta-data</param>
            <param name="tableMetaData">The table meta-data</param>
            <returns></returns>
        </member>
        <member name="T:Mighty.DataDirection">
            <summary>
            Specify the data direction for a <see cref="T:Mighty.DatabaseColumnAttribute"/>.
            </summary>
        </member>
        <member name="F:Mighty.DataDirection.Read">
            <summary>
            Read values from the database to this data member
            </summary>
        </member>
        <member name="F:Mighty.DataDirection.Write">
            <summary>
            Write values from this data member to the database
            </summary>
        </member>
        <member name="T:Mighty.Interfaces.MightyOrmAbstractInterface`1">
            <summary>
            Abstract interface for all features of <see cref="T:Mighty.MightyOrm`1"/>, provided for injection and mocking.
            </summary>
            <typeparam name="T">The generic type for items returned by this instance</typeparam>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.NpgsqlAutoDereferenceCursors">
            <summary>
            Should we auto-dereference cursors when using the Npgsql ADO.NET driver? (See Mighty documentation.)
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.NpgsqlAutoDereferenceFetchSize">
            <summary>
            How many rows at a time should we fetch if auto-dereferencing cursors on the Npgsql ADO.NET driver? (Default value 10,000.) (See Mighty documentation.)
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.ConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.Validator">
            <summary>
            Validator
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.SqlNamingMapper">
            <summary>
            C# &lt;=&gt; SQL mapper
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.DataProfiler">
            <summary>
            Optional SQL profiler
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.TableName">
            <summary>
            Table name (null if non-table-specific instance)
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.TableOwner">
            <summary>
            Table owner/schema (null if not specified)
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.BareTableName">
            <summary>
            Bare table name (without owner/schema part)
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.PrimaryKeyInfo">
            <summary>
            Keys and sequence
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.ValueColumn">
            <summary>
            Column from which value is retrieved by <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.KeyValues(System.String)"/>
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.DataContract">
            <summary>
            A data contract for the current item type, specified columns and case-sensitivity
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.DefaultColumns">
            <summary>
            The default set of columns to use for queries
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.IsGeneric">
            <summary>
            true for generic instance; false if dynamically typed instance
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.MightyOrmAbstractInterface`1.TableMetaData">
            <summary>
            Table meta data (filtered to only contain columns specific to generic type T, or to constructor `columns`, if either is present).
            </summary>
            <remarks>
            Note that this does a synchronous database SELECT on first access, and the result is then cached.
            Non-locking caching is used: a cached result will be returned after the first such SELECT to complete has finished.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.CreateCommand(System.String,System.Object[])">
            <summary>
            Create a <see cref="T:System.Data.Common.DbCommand"/> ready for use with Mighty.
            Manually creating commands is an advanced use-case; standard Mighty methods create and dispose
            of required <see cref="T:System.Data.Common.DbCommand"/> and <see cref="T:System.Data.Common.DbConnection"/> objects for you.
            You should use one of the variants of <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.CreateCommand(System.String,System.Object[])"/>
            for all commands passed in to Mighty, since on some providers this sets provider specific properties which are needed to ensure expected behaviour with Mighty.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.CreateCommand(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Create a <see cref="T:System.Data.Common.DbCommand"/> ready for use with Mighty.
            Manually creating commands is an advanced use-case; standard Mighty methods create and dispose
            of required <see cref="T:System.Data.Common.DbCommand"/> and <see cref="T:System.Data.Common.DbConnection"/> objects for you.
            You should use one of the variants of <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.CreateCommand(System.String,System.Object[])"/>
            for all commands passed in to Mighty, since on some providers this sets provider specific properties which are needed to ensure expected behaviour with Mighty.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.CreateCommandWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Create a general-purpose <see cref="T:System.Data.Common.DbCommand"/> with named parameters ready for use with Mighty.
            Manually creating commands is an advanced use-case; standard Mighty methods create and dispose
            of required <see cref="T:System.Data.Common.DbCommand"/> and <see cref="T:System.Data.Common.DbConnection"/> objects for you.
            You should use one of the variants of <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.CreateCommand(System.String,System.Object[])"/>
            for all commands passed in to Mighty, since on some providers this sets provider specific properties which are needed to ensure expected behaviour with Mighty.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="isProcedure">Is the SQL a stored procedure name (with optional argument spec) only?</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.ResultsAsExpando(System.Data.Common.DbCommand)">
            <summary>
            Put all output and return parameter values into an expando.
            Due to ADO.NET limitations, should only be called after disposing of any associated reader.
            </summary>
            <param name="cmd">The command</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.IsValid(System.Object,Mighty.Validation.OrmAction)">
            <summary>
            Is the passed in item valid against the current validator?
            </summary>
            <param name="item">The item</param>
            <param name="action">Optional action type (defaults to <see cref="F:Mighty.Validation.OrmAction.Save"/>)</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.HasPrimaryKey(System.Object)">
            <summary>
            True only if the passed in object contains (a) field(s) matching the named primary key(s) of the current table.
            </summary>
            <param name="item">Item to check</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.GetPrimaryKey(System.Object,System.Boolean)">
            <summary>
            Return primary key for item, as a single object for simple PK, or as object[] for compound PK.
            </summary>
            <param name="item">The item</param>
            <param name="alwaysArray">If true return object[] of 1 item, even for simple PK</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.OpenConnection">
            <summary>
            Creates a new DbConnection. You do not normally need to call this! (MightyOrm normally manages its own
            connections. Create a connection here and pass it on to other MightyOrm commands only in non-standard use
            cases where you need to explicitly manage transactions or share connections, e.g. when using explicit cursors.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.OpenConnection(System.String)">
            <summary>
            Creates a new DbConnection. You do not normally need to call this! (MightyOrm normally manages its own
            connections. Create a connection here and pass it on to other MightyOrm commands only in non-standard use
            cases where you need to explicitly manage transactions or share connections, e.g. when using explicit cursors.)
            </summary>
            <param name="connectionString">Connection string to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Query(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Single(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Get single item returned by database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Query(System.String,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.SingleFromQuery(System.String,System.Object[])">
            <summary>
            Get single item from query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Query(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.SingleFromQuery(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.SingleFromQueryWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from stored procedure call with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.SingleFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from stored procedure call with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryMultiple(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryMultiple(System.String,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryMultiple(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryMultipleWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryMultipleFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, from stored procedure call with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Execute(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Execute database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">Optional connection to use</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Execute(System.String,System.Object[])">
            <summary>
            Execute SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns>The number of rows affected</returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Execute(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Execute SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.ExecuteWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Execute SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>A dynamic object containing the names and output values of all output, input-output and return parameters</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.ExecuteProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Execute stored procedure with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>A dynamic object containing the names and output values of all output, input-output and return parameters</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Scalar(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Return scalar result (value of first or only column from first or only row) from database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Scalar(System.String,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Scalar(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.ScalarWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.ScalarFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from stored procedure with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.PagedFromSelect(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return paged results from arbitrary select statement.
            </summary>
            <param name="columns">Column spec</param>
            <param name="tableNameOrJoinSpec">A table name, or a complete join specification (i.e. anything you can SELECT FROM in SQL)</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="where">WHERE clause</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">Current page</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>The result of the paged query. Result properties are Items, TotalPages, and TotalRecords.</returns>
            <remarks>
            In this one instance, because of the connection to the underlying logic of these queries, the user
            can pass "SELECT columns" instead of columns.
            TO DO: Possibly cancel the above, it makes no sense from a UI pov!
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryNWithParams``1(System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Data.CommandBehavior,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Yield return values for single or multiple resultsets.
            </summary>
            <typeparam name="X">Use with <typeparamref name="T"/> for single or <see cref="T:System.Collections.Generic.IEnumerable`1"/> for multiple</typeparam>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="isProcedure">Is the SQL a stored procedure name (with optional argument spec) only?</param>
            <param name="behavior">The command behaviour</param>
            <param name="connection">Optional conneciton to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.QueryNWithParams``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Data.Common.DbConnection,System.Data.Common.DbDataReader)">
            <summary>
            Yield return values for single or multiple resultsets.
            </summary>
            <typeparam name="X">Use with <typeparamref name="T"/> for single or <see cref="T:System.Collections.Generic.IEnumerable`1"/> for multiple</typeparam>
            <param name="command">The command to execute</param>
            <param name="behavior">The command behaviour</param>
            <param name="connection">Optional conneciton to use</param>
            <param name="outerReader">The outer reader when this is a call to the inner reader in QueryMultiple</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.GetTableMetaData">
            <summary>
            Get table meta data (filtered to only contain columns specific to generic type T, or to constructor `columns`, if either is present).
            </summary>
            <remarks>
            Note that this does a synchronous database SELECT on first access, and the result is then cached.
            Non-locking caching is used: a cached result will be returned after the first such SELECT to complete has finished.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.GetTableMetaData(System.Data.Common.DbConnection)">
            <summary>
            Get table meta data (filtered to only contain columns specific to generic type T, or to constructor `columns`, if either is present).
            </summary>
            <remarks>
            Note that this does a synchronous database SELECT on first access, and the result is then cached.
            Non-locking caching is used: a cached result will be returned after the first such SELECT to complete has finished.
            </remarks>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)">
            <summary>
            Return a new item populated with defaults which correctly reflect the defaults of the current database table, if any.
            </summary>
            <param name="nameValues">Optional name-value collection from which to initialise some or all of the fields</param>
            <param name="addNonPresentAsDefaults">
            When true also include default values for fields not present in <paramref name="nameValues"/>
            but which exist in the defined list of columns for the current table in Mighty
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Data.Common.DbConnection,System.Object,System.Boolean)">
            <summary>
            Return a new item populated with defaults which correctly reflect the defaults of the current database table, if any.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="nameValues">Optional name-value collection from which to initialise some or all of the fields</param>
            <param name="addNonPresentAsDefaults">
            When true also include default values for fields not present in <paramref name="nameValues"/>
            but which exist in the defined list of columns for the current table in Mighty
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.GetColumnInfo(System.String,System.Boolean)">
            <summary>
            Get the meta-data for a single column
            </summary>
            <param name="column">Column name</param>
            <param name="ExceptionOnAbsent">If true throw an exception if there is no such column, otherwise return null.</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.GetColumnInfo(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            Get the meta-data for a single column
            </summary>
            <param name="connection">The connection to use</param>
            <param name="column">Column name</param>
            <param name="ExceptionOnAbsent">If true throw an exception if there is no such column, otherwise return null.</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.GetColumnDefault(System.String)">
            <summary>
            Get the default value for a column.
            </summary>
            <param name="columnName">The column name</param>
            <returns></returns>
            <remarks>
            Although it might look more efficient, GetColumnDefault should not do buffering, as we don't
            want to pass out the same actual object more than once.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.GetColumnDefault(System.Data.Common.DbConnection,System.String)">
            <summary>
            Get the default value for a column.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="columnName">The column name</param>
            <returns></returns>
            <remarks>
            Although it might look more efficient, GetColumnDefault should not do buffering, as we don't
            want to pass out the same actual object more than once.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Count(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Perform COUNT on current table.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="columns">Columns (defaults to *, but can be specified, e.g., to count non-nulls in a given field)</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Count(System.Object,System.String,System.Data.Common.DbConnection)">
            <summary>
            Perform COUNT on current table.
            </summary>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="columns">Columns (defaults to *, but can be specified, e.g., to count non-nulls in a given field)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Max(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get MAX of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Max(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get MAX of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Min(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get MIN of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Min(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get MIN of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Sum(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get SUM of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Sum(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get SUM of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Avg(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get AVG of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Avg(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get AVG of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Aggregate(System.String,System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Perform aggregate operation on the current table (use for SUM, MAX, MIN, AVG, etc.)
            </summary>
            <param name="function">Aggregate function</param>
            <param name="columns">Columns for aggregate function</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Aggregate(System.String,System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Perform aggregate operation on the current table (use for SUM, MAX, MIN, AVG, etc.)
            </summary>
            <param name="function">Aggregate function</param>
            <param name="columns">Columns for aggregate function</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.AggregateWithParams(System.String,System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Perform aggregate operation on the current table (use for SUM, MAX, MIN, AVG, etc.), with support for named params.
            </summary>
            <param name="function">Aggregate function</param>
            <param name="columns">Columns for aggregate function</param>
            <param name="where">WHERE clause</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Single(System.Object,System.String,System.Data.Common.DbConnection)">
            <summary>
            Get single item from the current table using primary key or name-value where specification.
            </summary>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="columns">List of columns to return</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Single(System.String,System.Object[])">
            <summary>
            Get single item from the current table using WHERE specification.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after where.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Single(System.String,System.Data.Common.DbConnection,System.String,System.String,System.Object[])">
            <summary>
            Get single item from the current table using WHERE specification.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            DbConnection coming early (not just before args) in this one case is really useful, as it avoids ambiguity between
            the `columns` and `orderBy` strings and optional string args.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.SingleWithParams(System.String,System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from the current table using WHERE specification with support for named parameters.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.All(System.String,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with WHERE and TOP/LIMIT specification.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.All(System.Data.Common.DbConnection,System.String,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with WHERE and TOP/LIMIT specification.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.All(System.Object,System.String,System.String,System.Int32)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with primary key or name-value where specification and TOP/LIMIT specification.
            </summary>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.All(System.Data.Common.DbConnection,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with primary key or name-value where specification and TOP/LIMIT specification.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.AllWithParams(System.String,System.String,System.String,System.Int32,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with WHERE and TOP/LIMIT specification and support for named parameters.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Paged(System.String,System.String,System.String,System.Int32,System.Int32,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Table-specific paging; there is also a data wrapper version of paging <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.PagedFromSelect(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Data.Common.DbConnection,System.Object[])"/>.
            </summary>
            <param name="orderBy">You may provide orderBy, if you don't it will try to order by PK and will produce an exception if there is no PK defined.</param>
            <param name="where">WHERE clause</param>
            <param name="columns">Columns to return</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">Current page</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>The result of the paged query. Result properties are Items, TotalPages, and TotalRecords.</returns>
            <remarks>
            `columns` parameter is not placed first because it's an override to something we may have alread provided in the constructor,
            so we don't want the user to have to non-fluently re-type it, or else type null, every time.
            </remarks>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Save(System.Object[])">
            <summary>
            Save one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </remarks>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Save(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Save one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </remarks>
            <param name="connection">The connection to use</param>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Save(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Save array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </summary>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Save(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Save array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Insert(System.Object)">
            <summary>
            Insert single item.
            Call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="item">The item to insert, in any reasonable format (for MightyOrm&lt;T&gt; this includes, but is not limited to, in instance of type T)</param>
            <returns>The item sent in but with the primary key populated</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Insert(System.Object,System.Data.Common.DbConnection)">
            <summary>
            Insert single item.
            Call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="item">The item to insert, in any reasonable format (for MightyOrm&lt;T&gt; this includes, but is not limited to, in instance of type T)</param>
            <returns>The item sent in but with the primary key populated</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Insert(System.Object[])">
            <summary>
            Insert one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </remarks>
            <param name="args">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Insert(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Insert one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </remarks>
            <param name="connection">The connection to use</param>
            <param name="args">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Insert(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Insert array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="items">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Insert(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Insert array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="items">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Update(System.Object[])">
            <summary>
            Update one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Update(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Update one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <param name="connection">The connection to use</param>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Update array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            </summary>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Update(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Update array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Delete(System.Object[])">
            <summary>
            Delete one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </remarks>
            <param name="args">The items</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Delete(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Delete one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </remarks>
            <param name="args">The items</param>
            <param name="connection">The connection to use</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Delete an array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </summary>
            <param name="items">The items</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Delete(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Delete an array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </summary>
            <param name="items">The items</param>
            <param name="connection">The connection to use</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.UpdateUsing(System.Object,System.Object)">
            <summary>
            Update the row(s) specified by the primary key(s) or WHERE values sent in using the values from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.UpdateUsing(System.Object,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Update the row(s) specified by the primary key(s) or WHERE values sent in using the values from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.UpdateUsing(System.Object,System.String,System.Object[])">
            <summary>
            Update all items matching WHERE clause using fields from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="where">WHERE clause specifying which rows to update</param>
            <param name="args">Auto-numbered input parameters</param>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.UpdateUsing(System.Object,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Update all items matching WHERE clause using fields from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="where">WHERE clause specifying which rows to update</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Delete(System.String,System.Object[])">
            <summary>
            Delete one or more items based on a WHERE clause.
            </summary>
            <param name="where">
            Non-optional WHERE clause.
            Specify "1=1" if you are sure that you want to delete all rows.
            </param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.Delete(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Delete one or more items based on a WHERE clause.
            </summary>
            <param name="where">
            Non-optional WHERE clause.
            Specify "1=1" if you are sure that you want to delete all rows.
            </param>
            <param name="args">Auto-numbered input parameters</param>
            <param name="connection">The connection to use</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.Interfaces.MightyOrmAbstractInterface`1.KeyValues(System.String)">
            <summary>
            Returns a string-string dictionary which can be directly bound to ASP.NET dropdowns etc. (see https://stackoverflow.com/a/805610/795690).
            </summary>
            <param name="orderBy">Order by, defaults to primary key</param>
            <returns></returns>
        </member>
        <member name="T:Mighty.Interfaces.SqlNamingMapperAbstractInterface">
            <summary>
            Pass an instance of this interface to the constructor of <see cref="T:Mighty.MightyOrm"/> in order to
            map between C# field names and SQL column names.
            If you're not (yet) used to <see cref="T:System.Action"/>/<see cref="T:System.Func`2"/> syntax in C#, you may find
            slightly harder to set up this mapper than if it had just been a class with methods you can override (see
            Mighty documentation for examples). One reason for doing it like this is that Mighty can then do much more
            aggressive and successful caching of its data contracts, by checking whether the mapping functions (not just
            the whole mapper) are the same.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.TableNameMapping">
            <summary>
            Function to get database table name from the data item type.
            Default is to return <see cref="T:System.Type"/>.Name unmodified.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.GetPrimaryKeyFieldNames">
            <summary>
            Function to get primary key field name(s) from the data item type and field or property name.
            The exact C# field/property name(s) should be returned and not database column names (where these are different).
            The default behaviour is to return <c>null</c> which results in no primary keys being specified in this way -
            they may still be specified using the <see cref="T:Mighty.MightyOrm"/> `keys` constructor parameter.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.GetSequenceName">
            <summary>
            Function to get the sequence from the data item type.
            Generally only applicable to sequence-based databases (Oracle and Postgres), except in the rare case where
            you may need to override the default identity function on identity-based databases (see Mighty documentation).
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.AutoMap">
            <summary>
            Specify whether Mighty should automatically remap any `keys`, `columns` and `orderBy` inputs it receives if one or more column names have been remapped.
            Default is to return <see cref="F:Mighty.AutoMap.On"/>.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.CaseSensitiveColumns">
            <summary>
            Should <see cref="T:Mighty.MightyOrm`1"/> be case sensitive when matching returned data to class properties?
            Provided the data item type in case you need it.
            Default is to return <c>false</c> since many databases are case insensitive and use different case conventions from C#, by default.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.ColumnNameMapping">
            <summary>
            Function to get database column name from the data item type and field or property name.
            Default is to return name unmodified.
            Since incoming data in Mighty can come from any name-value collection, <see cref="T:System.Reflection.MemberInfo"/>
            cannot always be provided and is left out to ensure consistent mapping.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.IgnoreColumn">
            <summary>
            Function to determine whether to ignore database column based on the data item type and field or property name.
            Default is to return <c>false</c> for do not ignore.
            Since incoming data in Mighty can come from any name-value collection, <see cref="T:System.Reflection.MemberInfo"/>
            cannot always be provided and is left out to ensure consistent mapping.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.ColumnDataDirection">
            <summary>
            Function to determine column data direction based on the data item type and field or property name.
            Default is to return <c>0</c> to leave direction unspecified.
            Since incoming data in Mighty can come from any name-value collection, <see cref="T:System.Reflection.MemberInfo"/>
            cannot always be provided and is left out to ensure consistent mapping.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.QuoteDatabaseIdentifier">
            <summary>
            Function to perform database specific identifier quoting (such as "name" -> "[name]" or "name" -> "'name'").
            Default is to return the passed in string unmodified.
            You should handle quoting identifiers here only, or in <see cref="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.TableNameMapping"/> and <see cref="P:Mighty.Interfaces.SqlNamingMapperAbstractInterface.ColumnNameMapping"/> only, but not both.
            </summary>
            <remarks>
            TO DO: Might be useful to provide additional method which splits the name at the dots then rejoins it, with single overrideable method to quote the individual parts
            </remarks>
        </member>
        <member name="T:Mighty.Keys.PrimaryKeyInfo">
            <summary>
            Store key and sequence info.
            </summary>
            <remarks>
            And value info on .NET Framework only.
            </remarks>
        </member>
        <member name="P:Mighty.Keys.PrimaryKeyInfo.PrimaryKeyColumn">
            <summary>
            Primary key database column name (or multiple columns as a comma separated list)
            </summary>
        </member>
        <member name="P:Mighty.Keys.PrimaryKeyInfo.PrimaryKeyField">
            <summary>
            Primary key field or property name (or multiple names as a comma separated list)
            </summary>
            <remarks>
            Mighty does not (currently) use this internally, it is made available as a convenience to users
            </remarks>
        </member>
        <member name="P:Mighty.Keys.PrimaryKeyInfo.Count">
            <summary>
            Number of primary keys
            </summary>
        </member>
        <member name="F:Mighty.Keys.PrimaryKeyInfo.PrimaryKeyColumnList">
            <summary>
            Separated, primary key columns (note: these are database column names not class field or property names if these are different)
            </summary>
        </member>
        <member name="P:Mighty.Keys.PrimaryKeyInfo.SequenceNameOrIdentityFunction">
            <summary>
            Sequence name or identity retrieval function (always null for compound PK)
            </summary>
        </member>
        <member name="P:Mighty.Keys.PrimaryKeyInfo.PrimaryKeyMemberInfo">
            <summary>
            For a single primary key only, on generic versions of Mighty only, the reflected
            <see cref="T:System.Reflection.MemberInfo"/> corresponding to the primary key field in the generic type.
            </summary>
        </member>
        <member name="P:Mighty.Keys.PrimaryKeyInfo.PrimaryKeyMemberName">
            <summary>
            For a single primary key only, on dynamic versions of Mighty only, the reflected
            member name corresponding to the primary key field in the dynamic type.
            </summary>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.#ctor(System.Boolean,Mighty.DataContracts.DataContract,Mighty.Plugins.PluginBase,System.Type,Mighty.Mapping.SqlNamingMapper,System.String,System.String)">
            <summary>
            Manage key(s) and sequence or identity.
            </summary>
            <param name="IsGeneric"></param>
            <param name="dataContract"></param>
            <param name="xplugin"></param>
            <param name="dataMappingType"></param>
            <param name="xmapper"></param>
            <param name="keyNames"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.SetPkMemberInfo(System.Boolean,Mighty.DataContracts.DataContract)">
            <summary>
            Set the primary key member info
            </summary>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.CheckGetKeyColumn(System.String)">
            <summary>
            Return the single (non-compound) primary key name, or throw <see cref="T:System.InvalidOperationException"/> with the provided message if there isn't one.
            </summary>
            <param name="partialMessage">Exception message to use on failure</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.CheckGetKeyName(System.Int32,System.String)">
            <summary>
            Return ith primary key name, with meaningful exception if too many requested.
            </summary>
            <param name="i">i</param>
            <param name="message">Meaningful exception message</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.KeyValuesFromKey(System.Object)">
            <summary>
            Return array of key values from passed in key values.
            Raise exception if the wrong number of keys are provided.
            The wrapping of a single item into an array which this does would happen automatically anyway
            in C# params handling, so this code is only required for the exception checking.
            </summary>
            <param name="key">The key value or values</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.WhereForKeys">
            <summary>
            Return a WHERE clause with auto-named parameters for the primary keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.CheckGetPrimaryKeyColumns">
            <summary>
            Return comma-separated list of primary key fields, raising an exception if there are none.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.IsKey(System.String)">
            <summary>
            Is this the name of a PK field?
            </summary>
            <param name="fieldName">The name to check</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Keys.PrimaryKeyInfo.IsKey(System.String,System.String@)">
            <summary>
            Is this the name of a PK field?
            </summary>
            <param name="fieldName">The name to check</param>
            <param name="canonicalKeyName">Returns the canonical key name, i.e. as specified in <see cref="T:Mighty.MightyOrm"/> constructor</param>
            <returns></returns>
        </member>
        <member name="T:Mighty.Mapping.ObjectExtensions">
            <summary>
            Useful object extensions
            </summary>
        </member>
        <member name="M:Mighty.Mapping.ObjectExtensions.Map(System.String,System.String,System.String)">
            <summary>
            Utility method to create <see cref="T:Mighty.Mapping.SqlNamingMapper"/> naming maps, chainable in fluent syntax.
            </summary>
            <param name="from"></param>
            <param name="memberName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Mighty.Mapping.SqlNamingMapper">
            <summary>
            Pass an instance of this class to the constructor of <see cref="T:Mighty.MightyOrm"/> in order to
            map between C# field names and SQL column names.
            If you're not (yet) used to <see cref="T:System.Action"/>/<see cref="T:System.Func`2"/> syntax in C#, you may find
            slightly harder to set up this mapper than if it had just been a class with methods you can override (see
            Mighty documentation for examples). One reason for doing it like this is that Mighty can then do much more
            aggressive and successful caching of its data contracts, by checking whether the mapping functions (not just
            the whole mapper) are the same.
            </summary>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.TableNameMapping">
            <summary>
            Function to get database table name from the data item type.
            Default is to return <c>null</c> in order to not override the table name.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.GetPrimaryKeyFieldNames">
            <summary>
            Function to get primary key field name(s) from the data item type and field or property name.
            The exact C# field/property name(s) should be returned and not database column names (where these are different).
            The default behaviour is to return <c>null</c> which results in no primary keys being specified in this way -
            they may still be specified using the <see cref="T:Mighty.MightyOrm"/> `keys` constructor parameter.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.GetSequenceName">
            <summary>
            Function to get the sequence from the data item type.
            Generally only applicable to sequence-based databases (Oracle and Postgres), except in the rare case where
            you may need to override the default identity function on identity-based databases (see Mighty documentation).
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="F:Mighty.Mapping.SqlNamingMapper.AlwaysAutoMap">
            <summary>
            Return <see cref="F:Mighty.AutoMap.On"/> whatever type is sent in.
            </summary>
            <remarks>
            We may need to be able to identify this one and see if it has changed?
            </remarks>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.AutoMap">
            <summary>
            Specify whether Mighty should automatically remap any `keys`, `columns` and `orderBy` inputs it receives if one or more column names have been remapped.
            Default is to return <see cref="F:Mighty.AutoMap.On"/>.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="F:Mighty.Mapping.SqlNamingMapper.UseCaseInsensitiveColumnMapping">
            <summary>
            Return <c>false</c> whatever type is sent in.
            </summary>
            <remarks>
            We need to be able to identify this one and tell users that they should not change it for dynamic <see cref="T:Mighty.MightyOrm"/>.
            </remarks>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.CaseSensitiveColumns">
            <summary>
            Should <see cref="T:Mighty.MightyOrm`1"/> be case sensitive when matching returned data to class properties?
            Provided the data item type in case you need it.
            Default is to return <c>false</c> since many databases are case insensitive and use different case conventions from C#, by default.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="F:Mighty.Mapping.SqlNamingMapper.IdentityColumnMapping">
            <summary>
            Identity column mapping.
            Takes data item type and field or property name, and returns field or property name unmodified.
            </summary>
            <remarks>
            We need to be able to identify this one and tell users that they should not change it for dynamic <see cref="T:Mighty.MightyOrm"/>.
            </remarks>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.ColumnNameMapping">
            <summary>
            Function to get database column name from the data item type and field or property name.
            Default is to return name unmodified.
            Since incoming data in Mighty can come from any name-value collection, <see cref="T:System.Reflection.MemberInfo"/>
            cannot always be provided and is left out to ensure consistent mapping.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="F:Mighty.Mapping.SqlNamingMapper.NeverIgnoreColumn">
            <summary>
            Never ignore column.
            Takes data item type and field or property name, and always returns <c>false</c>.
            </summary>
            <remarks>
            We need to be able to identify this one and tell users that they should not change it for dynamic <see cref="T:Mighty.MightyOrm"/>.
            </remarks>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.IgnoreColumn">
            <summary>
            Function to determine whether to ignore database column based on the data item type and field or property name.
            Default is to return <c>false</c> for do not ignore.
            Since incoming data in Mighty can come from any name-value collection, <see cref="T:System.Reflection.MemberInfo"/>
            cannot always be provided and is left out to ensure consistent mapping.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="F:Mighty.Mapping.SqlNamingMapper.ColumnDataDirectionUnspecified">
            <summary>
            Leave column data direction unspecified.
            Takes data item type and field or property name, and always returns <c>0</c>.
            </summary>
            <remarks>
            We need to be able to identify this one and tell users that they should not change it for dynamic <see cref="T:Mighty.MightyOrm"/>.
            </remarks>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.ColumnDataDirection">
            <summary>
            Function to determine column data direction based on the data item type and field or property name.
            Default is to return <c>0</c> to leave direction unspecified.
            Since incoming data in Mighty can come from any name-value collection, <see cref="T:System.Reflection.MemberInfo"/>
            cannot always be provided and is left out to ensure consistent mapping.
            The type passed in is the class or subclass type for dynamic instances of <see cref="T:Mighty.MightyOrm"/>
            and is the generic type T for generic instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
        </member>
        <member name="P:Mighty.Mapping.SqlNamingMapper.QuoteDatabaseIdentifier">
            <summary>
            Function to perform database specific identifier quoting (such as "name" -> "[name]" or "name" -> "'name'").
            Default is to return the passed in string unmodified.
            You should handle quoting identifiers here only, or in <see cref="P:Mighty.Mapping.SqlNamingMapper.TableNameMapping"/> and <see cref="P:Mighty.Mapping.SqlNamingMapper.ColumnNameMapping"/> only, but not both.
            </summary>
            <remarks>
            TO DO: Might be useful to provide additional method which splits the name at the dots then rejoins it, with single overrideable method to quote the individual parts
            </remarks>
        </member>
        <member name="M:Mighty.Mapping.SqlNamingMapper.#ctor">
            <summary>
            Parameterless constructor (overriding class can use protected setters)
            </summary>
        </member>
        <member name="M:Mighty.Mapping.SqlNamingMapper.#ctor(System.Func{System.Type,System.String},System.Func{System.Type,System.String,System.String},System.Func{System.Type,System.String},System.Func{System.Type,System.String},System.Func{System.Type,System.String,System.Boolean},System.Func{System.Type,System.String,Mighty.DataDirection},System.Func{System.Type,System.Boolean},System.Func{System.Type,Mighty.AutoMap},System.Func{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="tableNameMapping">Table name mapping</param>
            <param name="columnNameMapping">Column name mapping</param>
            <param name="getPrimaryKeyFieldNames">Specify primary key field names</param>
            <param name="getSequenceName">Specify sequence name</param>
            <param name="ignoreColumn">Specify column ignore</param>
            <param name="columnDataDirection">Experimental: Specify column data direction</param>
            <param name="caseSensitiveColumns">Specify whether Mighty should be case-sensitve when mapping between fields or properties and database columns (default <c>false</c>)</param>
            <param name="autoMap">The auto-map setting to use if any column renaming has been applied</param>
            <param name="quoteDatabaseIdentifier"></param>
        </member>
        <member name="T:Mighty.MightyOrm">
            <summary>
            In order to most simply support generics, the dynamic version of Mighty has to be a sub-class of the generic version, but of course the dynamic version is still the nicest version to use! :)
            </summary>
        </member>
        <member name="M:Mighty.MightyOrm.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Mighty.Validation.Validator,Mighty.Mapping.SqlNamingMapper,Mighty.Profiling.DataProfiler,Mighty.ConnectionProviders.ConnectionProvider)">
            <summary>
            Constructor for dynamic instances of <see cref="T:Mighty.MightyOrm"/>.
            </summary>
            <param name="connectionString">
            Connection string, with additional Mighty-specific support for non-standard "ProviderName=" property
            within the connection string itself.
            On .NET Framework (but not .NET Core) this can instead be a connection string name, in which case the
            connection string itself and provider name are looked up in the ConnectionStrings section of the .config file.
            </param>
            <param name="tableName">Table name</param>
            <param name="primaryKeys">Either single primary key member name, or comma separated list of names for compound PK</param>
            <param name="valueField">Value member name, for lookup tables</param>
            <param name="sequence">Optional sequence name for PK inserts on sequence-based DBs; or, optionally override
            identity retrieval function for identity-based DBs (e.g. specify "@@IDENTITY" here for SQL Server CE). As a special case,
            send an empty string (i.e. not the default value of null) to turn off identity support on identity-based DBs.</param>
            <param name="columns">Default column list</param>
            <param name="validator">Optional validator</param>
            <param name="mapper">Optional C# &lt;-&gt; SQL name mapper</param>
            <param name="profiler">Optional SQL profiler</param>
            <param name="connectionProvider">Optional connection provider (only needed for providers not yet known to MightyOrm)</param>
            <remarks>
            What about the SQL Profiler? Should this (really) go into here as a parameter?
            ALL column names in the above are pre-mapped C# names, not post-mapped SQL names, where you have a mapper which makes them different.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm.Open(System.String)">
            <summary>
            Return a new non-table specific instances of <see cref="T:Mighty.MightyOrm"/> (equivalent to a constructor call).
            </summary>
            <param name="connectionString">
            Connection string, with additional Mighty-specific support for non-standard "ProviderName=" property
            within the connection string itself.
            On .NET Framework (but not .NET Core) this can instead be a connection string name, in which case the
            connection string itself and provider name are looked up in the ConnectionStrings section of the .config file.
            </param>
            <returns></returns>
            <remarks>
            Static, so can't be made part of any kind of interface, even though we want this on the generic and dynamic versions.
            I think this requires new because of the conflict with the MightyOrm&lt;T&gt; version.
            TO DO: check.
            </remarks>
        </member>
        <member name="T:Mighty.MightyOrm`1">
            <summary>
            Strongly typed MightyOrm instance.
            </summary>
            <typeparam name="T">The generic type for items returned by this instance</typeparam>
        </member>
        <member name="M:Mighty.MightyOrm`1.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Mighty.Validation.Validator,Mighty.Mapping.SqlNamingMapper,Mighty.Profiling.DataProfiler,Mighty.ConnectionProviders.ConnectionProvider)">
            <summary>
            Constructor for strongly typed instances of <see cref="T:Mighty.MightyOrm`1"/>.
            </summary>
            <param name="connectionString">
            Connection string, with additional Mighty-specific support for non-standard "ProviderName=" property
            within the connection string itself.
            On .NET Framework (but not .NET Core) this can instead be a connection string name, in which case the
            connection string itself and provider name are looked up in the ConnectionStrings section of the .config file.
            </param>
            <param name="tableName">Override the table name (defaults to using T class name)</param>
            <param name="primaryKeys">Either single primary key member name, or comma separated list of names for compound PK</param>
            <param name="valueField">Value member name, for lookup tables</param>
            <param name="sequence">Optional sequence name for PK inserts on sequence-based DBs; or, optionally override
            identity retrieval function for identity-based DBs (e.g. specify "@@IDENTITY" here for SQL Server CE). As a special case,
            send an empty string (i.e. not the default value of null) to turn off identity support on identity-based DBs.</param>
            <param name="columns">Default column list</param>
            <param name="validator">Optional validator</param>
            <param name="mapper">Optional C# &lt;-&gt; SQL name mapper</param>
            <param name="profiler">Optional SQL profiler</param>
            <param name="connectionProvider">Optional connection provider (only needed for providers not yet known to MightyOrm)</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.Open(System.String)">
            <summary>
            Return a new non-table specific instances of <see cref="T:Mighty.MightyOrm`1"/> (equivalent to a constructor call).
            </summary>
            <param name="connectionString">
            Connection string, with additional Mighty-specific support for non-standard "ProviderName=" property
            within the connection string itself.
            On .NET Framework (but not .NET Core) this can instead be a connection string name, in which case the
            connection string itself and provider name are looked up in the ConnectionStrings section of the .config file.
            </param>
            <returns></returns>
            <remarks>Static, so can't be defined anywhere but here.</remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.SetTableNameAndOwner(Mighty.DataContracts.DataContract,System.String)">
            <summary>
            Set table name, and from that bare table name and table owner.
            </summary>
            <param name="dataContract">The class data contract (may include a table name override from attributes or mapper)</param>
            <param name="tableName">The table name from the constructor</param>
        </member>
        <member name="F:Mighty.MightyOrm`1._TableMetaDataLazy">
            <summary>
            Lazy initialiser
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.TableMetaData">
            <summary>
            Table meta data (filtered to only contain columns specific to generic type T, or to constructor `columns`, if either is present).
            </summary>
            <remarks>
            Note that this does a synchronous database SELECT on first access, and the result is then cached.
            Non-locking caching is used: a cached result will be returned after the first such SELECT to complete has finished.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.CheckGetValueColumn(System.String)">
            <summary>
            Return value column, raising an exception if not specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CheckGetTableName">
            <summary>
            Return current table name, raising an exception if there isn't one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.ValidateAction(System.Collections.Generic.IEnumerable{System.Object},Mighty.Validation.OrmAction)">
            <summary>
            Checks that every item in the list is valid for the action to be undertaken.
            Normally you should not need to override this, but override <see cref="M:Mighty.Validation.Validator.ValidateForAction(Mighty.Validation.OrmAction,System.Object,System.Action{System.Object})"/>
            or <see cref="M:Mighty.Validation.Validator.Validate(System.Object,System.Action{System.Object})"/> instead.
            </summary>
            <param name="action">The ORM action</param>
            <param name="items">The list of items. (Can be T, dynamic, or anything else with suitable name-value (and optional type) data in it.)</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.IsValid(System.Object,Mighty.Validation.OrmAction)">
            <summary>
            Is the passed in item valid against the current validator?
            </summary>
            <param name="item">The item</param>
            <param name="action">Optional action type (defaults to <see cref="F:Mighty.Validation.OrmAction.Save"/>)</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.HasPrimaryKey(System.Object)">
            <summary>
            True only if the passed in object contains field(s) matching the named primary key(s) of the current table.
            </summary>
            <param name="item">Item to check</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetPrimaryKey(System.Object,System.Boolean)">
            <summary>
            Return primary key for item, as a single object for simple PK, or as object[] for compound PK.
            </summary>
            <param name="item">The item</param>
            <param name="alwaysArray">If true return object[] of 1 item, even for simple PK</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateCommand(System.String)">
            <summary>
            Create command, setting any provider specific features which we assume elsewhere.
            </summary>
            <param name="sql">The command SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateCommandWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Create a general-purpose <see cref="T:System.Data.Common.DbCommand"/> with named parameters ready for use with Mighty.
            Manually creating commands is an advanced use-case; standard Mighty methods create and dispose
            of required <see cref="T:System.Data.Common.DbCommand"/> and <see cref="T:System.Data.Common.DbConnection"/> objects for you.
            You should use one of the variants of <see cref="M:Mighty.MightyOrm`1.CreateCommand(System.String,System.Object[])"/>
            for all commands passed in to Mighty, since on some providers this sets provider specific properties which are needed to ensure expected behaviour with Mighty.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="isProcedure">Is the SQL a stored procedure name (with optional argument spec) only?</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateCommandWithParamsAndRowCountCheck(System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Create command with named, typed, directional parameters.
            </summary>
        </member>
        <member name="M:Mighty.MightyOrm`1.ResultsAsExpando(System.Data.Common.DbCommand)">
            <summary>
            Put all output and return parameter values into an expando.
            Due to ADO.NET limitations, should only be called after disposing of any associated reader.
            </summary>
            <param name="cmd">The command</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.AppendRowCountResults(System.Int32,System.Object,System.Object)">
            <summary>
            Add Execute results for <see cref="T:Mighty.RowCount"/> parameters.
            </summary>
            <param name="rowCount">The row count</param>
            <param name="outParams">The list of output parameters</param>
            <param name="results">The results object to add to</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateUpdateCommand(System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Create update command
            </summary>
            <param name="item">The item which contains the update values</param>
            <param name="updateNameValuePairs">The columns to update (with values as SQL params)</param>
            <param name="whereNameValuePairs">The columns which specify what to update (with values as SQL params)</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateInsertCommand(System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Mighty.MightyOrm{`0}.PkFilter)">
            <summary>
            Create insert command
            </summary>
            <param name="item">The item containing the update values</param>
            <param name="insertNames">The names of the columns to update</param>
            <param name="insertValues">The values (as SQL parameters) of the columns to update</param>
            <param name="pkFilter">The PK filter setting</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateDeleteCommand(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Create delete command
            </summary>
            <param name="item">The item containg the param values</param>
            <param name="whereNameValuePairs">The column names (and values as SQL params) specifying what to delete</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateActionCommand(Mighty.Validation.OrmAction,System.Object,Mighty.Validation.OrmAction@)">
            <summary>
            Create the <see cref="T:System.Data.Common.DbCommand"/> for an ORM action on an item
            </summary>
            <param name="originalAction">The action</param>
            <param name="item">The item</param>
            <param name="revisedAction">The original action unless that was <see cref="F:Mighty.Validation.OrmAction.Save"/>, in which case this will become <see cref="F:Mighty.Validation.OrmAction.Insert"/> or <see cref="F:Mighty.Validation.OrmAction.Update"/></param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.UpsertItemPK(System.Object,System.Object,System.Boolean)">
            <summary>
            Write new PK value into item.
            The PK field is a) created if not present and b) filled with the new PK value, where this is possible
            (e.g. fields can't be created on POCOs, and property values can't be set on immutable items such as
            anonymously typed objects).
            </summary>
            <param name="item">The item to modify</param>
            <param name="pk">The PK value (PK may be int or long depending on the current database)</param>
            <param name="createIfNeeded">Writing back the value to a mutable item is worth it, but creating a
            replacement item for an immutable item other than the first, on a true insert, isn't</param>
            <returns>The modified item</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.AddParam(System.Data.Common.DbCommand,System.Object,System.String,System.Data.ParameterDirection,System.Type)">
            <summary>
            Add a parameter to a command
            </summary>
            <param name="cmd">The command</param>
            <param name="value">The value</param>
            <param name="name">Optional parameter name</param>
            <param name="direction">Optional parameter direction</param>
            <param name="type">Optional parameter type (for typed NULL support)</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.AddParams(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Add auto-named parameters to a command from an array of parameter values (which typically would have been
            passed in to Mighty using C# parameter syntax)
            </summary>
            <param name="cmd">The command</param>
            <param name="args">Auto-numbered input parameters</param>
        </member>
        <member name="T:Mighty.MightyOrm`1.PkFilter">
            <summary>
            Optionally control whether to add only the PKs or only not the PKs, when creating parameters from object
            </summary>
        </member>
        <member name="M:Mighty.MightyOrm`1.AddNamedParams(System.Data.Common.DbCommand,System.Object,System.Data.ParameterDirection,Mighty.MightyOrm{`0}.PkFilter)">
            <summary>
            Add named, typed directional params to DbCommand.
            </summary>
            <param name="cmd">The command</param>
            <param name="nameValuePairs">Parameters to add (POCO, anonymous type, NameValueCollection, ExpandoObject, etc.)</param>
            <param name="direction">Parameter direction</param>
            <param name="pkFilter">Optional PK filter control</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetWhereSpecFromWhereParams(System.Object)">
            <summary>
            Produce WHERE clause and inParams or args from either name-value collection or primary key value-only collection
            </summary>
            <param name="whereParams">Name-value or value-only params</param>
            <returns>WHERE; inParams; args</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetTableMetaData">
            <summary>
            Table meta data (filtered to only contain columns specific to generic type T, or to constructor `columns`, if either is present).
            </summary>
            <remarks>
            Note that this does a synchronous database SELECT on first access, and the result is then cached.
            Non-locking caching is used: a cached result will be returned after the first such SELECT to complete has finished.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetTableMetaData(System.Data.Common.DbConnection)">
            <summary>
            Table meta data (filtered to only contain columns specific to generic type T, or to constructor `columns`, if either is present).
            </summary>
            <remarks>
            Note that this does a synchronous database SELECT on first access, and the result is then cached.
            Non-locking caching is used: a cached result will be returned after the first such SELECT to complete has finished.
            </remarks>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)">
            <summary>
            Make a new item, with optional passed-in name-value collection as initialiser.
            </summary>
            <param name="nameValues">The name-value collection</param>
            <param name="addNonPresentAsDefaults">
            If true also include default values for fields not present in the collection
            but which exist in columns for the current table in Mighty, which correctly
            reflect the defaults of the current database table.
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.New(System.Data.Common.DbConnection,System.Object,System.Boolean)">
            <summary>
            Make a new item, with optional passed-in name-value collection as initialiser.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="nameValues">The name-value collection</param>
            <param name="addNonPresentAsDefaults">
            If true also include default values for fields not present in the collection
            but which exist in columns for the current table in Mighty, which correctly
            reflect the defaults of the current database table.
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetColumnInfo(System.String,System.Boolean)">
            <summary>
            Get the meta-data for a single column
            </summary>
            <param name="column">Column name</param>
            <param name="ExceptionOnAbsent">If true throw an exception if there is no such column, otherwise return null.</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetColumnInfo(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            Get the meta-data for a single column
            </summary>
            <param name="connection">The connection to use</param>
            <param name="column">Column name</param>
            <param name="ExceptionOnAbsent">If true throw an exception if there is no such column, otherwise return null.</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetColumnDefault(System.String)">
            <summary>
            Get the default value for a column.
            </summary>
            <param name="columnName">The column name</param>
            <returns></returns>
            <remarks>
            Although it might look more efficient, GetColumnDefault should not do buffering, as we don't
            want to pass out the same actual object more than once.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.GetColumnDefault(System.Data.Common.DbConnection,System.String)">
            <summary>
            Get the default value for a column.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="columnName">The column name</param>
            <returns></returns>
            <remarks>
            Although it might look more efficient, GetColumnDefault should not do buffering, as we don't
            want to pass out the same actual object more than once.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.AggregateWithParams(System.String,System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Perform aggregate operation on the current table (use for SUM, MAX, MIN, AVG, etc.), with support for named params.
            </summary>
            <param name="function">Aggregate function</param>
            <param name="columns">Columns for aggregate function</param>
            <param name="where">WHERE clause</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            This only lets you pass in the aggregate expressions of your SQL variant, but SUM, AVG, MIN, MAX are supported on all.
            </remarks>
            <remarks>
            This is very close to a 'redirect' method, but couldn't have been in the abstract interface before because of the plugin access.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.UpdateUsing(System.Object,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Update all items matching WHERE clause using fields from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="where">WHERE clause specifying which rows to update</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.UpdateUsingWithParams(System.Object,System.String,System.Data.Common.DbConnection,System.Object,System.Object[])">
            <summary>
            Update all items matching WHERE clause using fields from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="where">WHERE clause specifying which rows to update</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="args">Auto-numbered input parameters</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.Delete(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Delete one or more items based on a WHERE clause.
            </summary>
            <param name="where">
            Non-optional WHERE clause.
            Specify "1=1" if you are sure that you want to delete all rows.
            </param>
            <param name="args">Auto-numbered input parameters</param>
            <param name="connection">The connection to use</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.ActionOnItems(Mighty.Validation.OrmAction,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Perform CRUD action for the item(s) in the params list.
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of *modified* items is returned; the modification is to update the primary key to the correct new value for inserted items.
            If the input item does not support field writes/inserts as needed then an <see cref="T:System.Dynamic.ExpandoObject"/> corresponding to the updated item is returned instead.
            </summary>
            <param name="action">The ORM action</param>
            <param name="connection">The connection to use</param>
            <param name="items">The item or items</param>
            <returns>The list of modified items</returns>
            <remarks>Here and in <see cref="M:Mighty.MightyOrm`1.UpsertItemPK(System.Object,System.Object,System.Boolean)"/> we always return the modified original object where possible</remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.ActionOnItemsWithOutput(Mighty.Validation.OrmAction,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Perform CRUD action for the item(s) in the params list.
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of *modified* items is returned; the modification is to update the primary key to the correct new value for inserted items.
            If the input item does not support field writes/inserts as needed then an <see cref="T:System.Dynamic.ExpandoObject"/> corresponding to the updated item is returned instead.
            </summary>
            <param name="action">The ORM action</param>
            <param name="connection">The connection to use</param>
            <param name="items">The item or items</param>
            <returns>The list of modified items</returns>
            <remarks>Here and in <see cref="M:Mighty.MightyOrm`1.UpsertItemPK(System.Object,System.Object,System.Boolean)"/> we always return the modified original object where possible</remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.KeyValues(System.String)">
            <summary>
            Returns a string-string dictionary which can be directly bound to ASP.NET dropdowns etc. (see https://stackoverflow.com/a/805610/795690).
            </summary>
            <param name="orderBy">Order by, defaults to primary key</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.OpenConnection">
            <summary>
            Creates a new DbConnection. You do not normally need to call this! (MightyOrm normally manages its own
            connections. Create a connection here and pass it on to other MightyOrm commands only in non-standard use
            cases where you need to explicitly manage transactions or share connections, e.g. when using explicit cursors.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.OpenConnection(System.String)">
            <summary>
            Creates a new DbConnection. You do not normally need to call this! (MightyOrm normally manages its own
            connections. Create a connection here and pass it on to other MightyOrm commands only in non-standard use
            cases where you need to explicitly manage transactions or share connections, e.g. when using explicit cursors.)
            </summary>
            <param name="connectionString">Connection string to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.OpenConnection(System.Boolean,System.String)">
            <summary>
            Internal usage only, creates a new DbConnection.
            </summary>
            <param name="isInternal"><cref>true</cref> if called internally</param>
            <param name="connectionString">Connection string to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Execute(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Execute database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">Optional connection to use</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Scalar(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Return scalar result (value of first or only column from first or only row) from database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.PagedFromSelect(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return paged results from arbitrary select statement.
            </summary>
            <param name="columns">Column spec</param>
            <param name="tableNameOrJoinSpec">A table name, or a complete join specification (i.e. anything you can SELECT FROM in SQL)</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="where">WHERE clause</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">Current page</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>The result of the paged query. Result properties are Items, TotalPages, and TotalRecords.</returns>
            <remarks>
            In this one instance, because of the connection to the underlying logic of these queries, the user
            can pass "SELECT columns" instead of columns.
            TO DO: Possibly cancel the above, it makes no sense from a UI pov!
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.AllWithParams(System.String,System.String,System.String,System.Int32,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with WHERE and TOP/LIMIT specification and support for named parameters.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryNWithParams``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Data.Common.DbConnection,System.Data.Common.DbDataReader)">
            <summary>
            Yield return values for single or multiple resultsets.
            </summary>
            <typeparam name="X">Use with <typeparamref name="T"/> for single or <see cref="T:System.Collections.Generic.IEnumerable`1"/> for multiple</typeparam>
            <param name="command">The command to execute</param>
            <param name="behavior">The command behaviour</param>
            <param name="connection">Optional conneciton to use</param>
            <param name="outerReader">The outer reader when this is a call to the inner reader in QueryMultiple</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.ActionOnItem(System.Object@,Mighty.Validation.OrmAction,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Save, Insert, Update or Delete an item.
            Save means: update item if PK field or fields are present and at non-default values, insert otherwise.
            On inserting an item with a single PK and a sequence/identity the PK field of the item itself is
            a) created if not present and b) filled with the new PK value, where this is possible (examples of cases
            where not possible are: fields can't be created on POCOs, property values can't be set on immutable items
            such as anonymously typed objects).
            </summary>
            <param name="modified">The modified item with PK added, if <see cref="F:Mighty.Validation.OrmAction.Insert"/></param>
            <param name="originalAction">Save, Insert, Update or Delete</param>
            <param name="item">item</param>
            <param name="connection">The connection to use</param>
            <returns>The number of items affected</returns>
            <remarks>
            It *is* technically possibly (by writing to private backing fields) to change the field value in anonymously
            typed objects - http://stackoverflow.com/a/30242237/795690 - and bizarrely VB supports writing to fields in
            anonymously typed objects natively even though C# doesn't - http://stackoverflow.com/a/9065678/795690 (which
            sounds as if it means that if this part of the library was written in VB then doing this would be officially
            supported? not quite sure, that assumes that the different implementations of anonymous types can co-exist)
            </remarks>
        </member>
        <member name="P:Mighty.MightyOrm`1.NpgsqlAutoDereferenceCursors">
            <summary>
            Should we auto-dereference cursors when using the Npgsql ADO.NET driver? (See Mighty documentation.)
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.GlobalNpgsqlAutoDereferenceCursors">
            <summary>
            Allows setting a global value for whether to auto-dereference cursors when using the Npgsql ADO.NET driver. (See Mighty documentation.)
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.NpgsqlAutoDereferenceFetchSize">
            <summary>
            How many rows at a time should we fetch if auto-dereferencing cursors on the Npgsql ADO.NET driver? (Default value 10,000.) (See Mighty documentation.)
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.GlobalNpgsqlAutoDereferenceFetchSize">
            <summary>
            Allows setting a global value for how many rows at a time to fetch if auto-dereferencing cursors on the Npgsql ADO.NET driver. (Default value 10,000.) (See Mighty documentation.)
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.ConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.Factory">
            <summary>
            ADO.NET provider factory
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.Plugin">
            <summary>
            Plugin
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.GlobalConnectionString">
            <summary>
            Allows setting a global connection string (used by default if nothing else set; set it on untyped <see cref="T:Mighty.MightyOrm"/> to set it everywhere).
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.GlobalValidator">
            <summary>
            Allows setting a global validator (used by default if nothing else set; set it on untyped <see cref="T:Mighty.MightyOrm"/> to set it everywhere).
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.Validator">
            <summary>
            Validator
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.GlobalSqlNamingMapper">
            <summary>
            Allows setting a global sql mapper (used by default if nothing else set; set it on untyped <see cref="T:Mighty.MightyOrm"/> to set it everywhere).
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.SqlNamingMapper">
            <summary>
            C# &lt;=&gt; SQL mapper
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.GlobalDataProfiler">
            <summary>
            Allows setting a global SQL profiler (used by default if nothing else set; set it on untyped <see cref="T:Mighty.MightyOrm"/> to set it everywhere).
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.DataProfiler">
            <summary>
            Optional SQL profiler
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.TableName">
            <summary>
            Table name (null if non-table-specific instance)
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.TableOwner">
            <summary>
            Table owner/schema (null if not specified)
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.BareTableName">
            <summary>
            Bare table name (without owner/schema part)
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.PrimaryKeyInfo">
            <summary>
            Keys and sequence
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.ValueColumn">
            <summary>
            Column from which value is retrieved by <see cref="M:Mighty.MightyOrm`1.KeyValues(System.String)"/>
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.DataContract">
            <summary>
            A data contract for the current item type, specified columns and case-sensitivity
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.DefaultColumns">
            <summary>
            The default set of columns to use for queries
            </summary>
        </member>
        <member name="P:Mighty.MightyOrm`1.IsGeneric">
            <summary>
            true for generic instantiation; false if dynamically typed instantiation
            </summary>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateCommand(System.String,System.Object[])">
            <summary>
            Create a <see cref="T:System.Data.Common.DbCommand"/> ready for use with Mighty.
            Manually creating commands is an advanced use-case; standard Mighty methods create and dispose
            of required <see cref="T:System.Data.Common.DbCommand"/> and <see cref="T:System.Data.Common.DbConnection"/> objects for you.
            You should use one of the variants of <see cref="M:Mighty.MightyOrm`1.CreateCommand(System.String,System.Object[])"/>
            for all commands passed in to Mighty, since on some providers this sets provider specific properties which are needed to ensure expected behaviour with Mighty.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.CreateCommand(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Create a <see cref="T:System.Data.Common.DbCommand"/> ready for use with Mighty.
            Manually creating commands is an advanced use-case; standard Mighty methods create and dispose
            of required <see cref="T:System.Data.Common.DbCommand"/> and <see cref="T:System.Data.Common.DbConnection"/> objects for you.
            You should use one of the variants of <see cref="M:Mighty.MightyOrm`1.CreateCommand(System.String,System.Object[])"/>
            for all commands passed in to Mighty, since on some providers this sets provider specific properties which are needed to ensure expected behaviour with Mighty.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Query(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Single(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Get single item returned by database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Query(System.String,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.SingleFromQuery(System.String,System.Object[])">
            <summary>
            Get single item from query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.Query(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.SingleFromQuery(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items returned by SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.SingleFromQueryWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from stored procedure call with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.SingleFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from stored procedure call with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryMultiple(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by database command.
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryMultiple(System.String,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryMultiple(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryMultipleWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, returned by SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">The connection to use</param>
            <param name="args">Auto-numbered parameter values for SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryMultipleFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of result sets, each of which is itself an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items, from stored procedure call with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="connection">Optional connection to use</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Execute(System.String,System.Object[])">
            <summary>
            Execute SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns>The number of rows affected</returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.Execute(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Execute SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.ExecuteWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Execute SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>A dynamic object containing the names and output values of all output, input-output and return parameters</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.ExecuteProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Execute stored procedure with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>A dynamic object containing the names and output values of all output, input-output and return parameters</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Scalar(System.String,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after SQL.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.Scalar(System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from SQL query.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.ScalarWithParams(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from SQL query with support for named parameters.
            </summary>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.ScalarFromProcedure(System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Return scalar result (value of first or only column from first or only row) from stored procedure with support for named parameters.
            </summary>
            <param name="spName">Stored procedure name</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.QueryNWithParams``1(System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Data.CommandBehavior,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Yield return values for single or multiple resultsets.
            </summary>
            <typeparam name="X">Use with <typeparamref name="T"/> for single or <see cref="T:System.Collections.Generic.IEnumerable`1"/> for multiple</typeparam>
            <param name="sql">The command SQL</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="isProcedure">Is the SQL a stored procedure name (with optional argument spec) only?</param>
            <param name="behavior">The command behaviour</param>
            <param name="connection">Optional conneciton to use</param>
            <param name="args">Auto-numbered parameters for the SQL</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Count(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Perform COUNT on current table.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="columns">Columns (defaults to *, but can be specified, e.g., to count non-nulls in a given field)</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Count(System.Object,System.String,System.Data.Common.DbConnection)">
            <summary>
            Perform COUNT on current table.
            </summary>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="columns">Columns (defaults to *, but can be specified, e.g., to count non-nulls in a given field)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Max(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get MAX of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Max(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get MAX of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Min(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get MIN of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Min(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get MIN of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Sum(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get SUM of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Sum(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get SUM of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Avg(System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get AVG of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Avg(System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Get AVG of column on current table.
            </summary>
            <param name="columns">Columns</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Aggregate(System.String,System.String,System.String,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Perform aggregate operation on the current table (use for SUM, MAX, MIN, AVG, etc.)
            </summary>
            <param name="function">Aggregate function</param>
            <param name="columns">Columns for aggregate function</param>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Aggregate(System.String,System.String,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Perform aggregate operation on the current table (use for SUM, MAX, MIN, AVG, etc.)
            </summary>
            <param name="function">Aggregate function</param>
            <param name="columns">Columns for aggregate function</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Single(System.Object,System.String,System.Data.Common.DbConnection)">
            <summary>
            Get single item from the current table using primary key or name-value where specification.
            </summary>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="columns">List of columns to return</param>
            <param name="connection">Optional connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Single(System.String,System.Object[])">
            <summary>
            Get single item from the current table using WHERE specification.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            'Easy-calling' version, optional args straight after where.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.Single(System.String,System.Data.Common.DbConnection,System.String,System.String,System.Object[])">
            <summary>
            Get single item from the current table using WHERE specification.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
            <remarks>
            DbConnection coming early (not just before args) in this one case is really useful, as it avoids ambiguity between
            the `columns` and `orderBy` strings and optional string args.
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.SingleWithParams(System.String,System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Get single item from the current table using WHERE specification with support for named parameters.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="connection">Optional connection to use</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="inParams">Named input parameters</param>
            <param name="outParams">Named output parameters</param>
            <param name="ioParams">Named input-output parameters</param>
            <param name="returnParams">Named return parameters</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.All(System.String,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with WHERE and TOP/LIMIT specification.
            </summary>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.All(System.Data.Common.DbConnection,System.String,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with WHERE and TOP/LIMIT specification.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.All(System.Object,System.String,System.String,System.Int32)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with primary key or name-value where specification and TOP/LIMIT specification.
            </summary>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.All(System.Data.Common.DbConnection,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items from the current table with primary key or name-value where specification and TOP/LIMIT specification.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="columns">Columns to return</param>
            <param name="limit">Maximum number of items to return</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Paged(System.String,System.String,System.String,System.Int32,System.Int32,System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Table-specific paging; there is also a data wrapper version of paging <see cref="M:Mighty.MightyOrm`1.PagedFromSelect(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Data.Common.DbConnection,System.Object[])"/>.
            </summary>
            <param name="orderBy">You may provide orderBy, if you don't it will try to order by PK and will produce an exception if there is no PK defined.</param>
            <param name="where">WHERE clause</param>
            <param name="columns">Columns to return</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">Current page</param>
            <param name="connection">Optional connection to use</param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>The result of the paged query. Result properties are Items, TotalPages, and TotalRecords.</returns>
            <remarks>
            `columns` parameter is not placed first because it's an override to something we may have already provided in the constructor
            (so we don't want the user to have to non-fluently re-type it, or else type null, every time).
            </remarks>
        </member>
        <member name="M:Mighty.MightyOrm`1.Save(System.Object[])">
            <summary>
            Save one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </remarks>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Save(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Save one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </remarks>
            <param name="connection">The connection to use</param>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Save(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Save array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </summary>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Save(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Save array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            'Save' means
            objects with missing or default primary keys are inserted
            and objects with non-default primary keys are updated.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Insert(System.Object)">
            <summary>
            Insert single item.
            Call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="item">The item to insert, in any reasonable format (for MightyOrm&lt;T&gt; this includes, but is not limited to, in instance of type T)</param>
            <returns>The item sent in but with the primary key populated</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Insert(System.Object,System.Data.Common.DbConnection)">
            <summary>
            Insert single item.
            Call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="item">The item to insert, in any reasonable format (for MightyOrm&lt;T&gt; this includes, but is not limited to, in instance of type T)</param>
            <param name="connection">The connection to use</param>
            <returns>The item sent in but with the primary key populated</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Insert(System.Object[])">
            <summary>
            Insert one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </remarks>
            <param name="args">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Insert(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Insert one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </remarks>
            <param name="connection">The connection to use</param>
            <param name="args">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Insert(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Insert array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="items">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Insert(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Insert array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> before insert if you need to pre-populate your inserted items with any defined database column defaults.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="items">The items</param>
            <returns>The items sent in but with the primary keys populated</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Update(System.Object[])">
            <summary>
            Update one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Update(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Update one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <param name="connection">The connection to use</param>
            <param name="args">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Update array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            </summary>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Update(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Update array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Delete(System.Object[])">
            <summary>
            Delete one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </remarks>
            <param name="args">The items</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Delete(System.Data.Common.DbConnection,System.Object[])">
            <summary>
            Delete one or more items specified using C# params arguments (provide one or more comma separated arguments in C# params format, will also accept a single object array).
            </summary>
            <remarks>
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </remarks>
            <param name="args">The items</param>
            <param name="connection">The connection to use</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Delete an array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </summary>
            <param name="items">The items</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.Delete(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Delete an array or other <see cref="T:System.Collections.IEnumerable"/> of items.
            Each argument may be (or contain) a value (or values) only, in which case
            it specifies the primary key value(s) of the item to delete, or it can be any object containing name-values pairs in which case
            it should contain fields with names matching the primary key(s) whose values will specify the item to delete (but it may contain
            other fields as well which will be ignored here).
            </summary>
            <param name="items">The items</param>
            <param name="connection">The connection to use</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.MightyOrm`1.UpdateUsing(System.Object,System.Object)">
            <summary>
            Update the row(s) specified by the primary key(s) or WHERE values sent in using the values from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.UpdateUsing(System.Object,System.Object,System.Data.Common.DbConnection)">
            <summary>
            Update the row(s) specified by the primary key(s) or WHERE values sent in using the values from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="whereParams">Value(s) to be mapped to the table's primary key(s), or object containing named value(s) to be mapped to the matching named column(s)</param>
            <param name="connection">Optional connection to use</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.UpdateUsing(System.Object,System.String,System.Object[])">
            <summary>
            Update all items matching WHERE clause using fields from the item sent in.
            If `keys` has been specified on the current Mighty instance then any primary key fields in the item are ignored.
            The item is not filtered to remove fields not in the table, if you need that you can call <see cref="M:Mighty.MightyOrm`1.New(System.Object,System.Boolean)"/> with first parameter `partialItem` and second parameter `false` first.
            </summary>
            <param name="partialItem">Item containing values to update with</param>
            <param name="where">WHERE clause specifying which rows to update</param>
            <param name="args">Auto-numbered input parameters</param>
        </member>
        <member name="M:Mighty.MightyOrm`1.Delete(System.String,System.Object[])">
            <summary>
            Delete one or more items based on a WHERE clause.
            </summary>
            <param name="where">
            Non-optional WHERE clause.
            Specify "1=1" if you are sure that you want to delete all rows.
            </param>
            <param name="args">Auto-numbered input parameters</param>
            <returns>The number of items affected</returns>
        </member>
        <member name="M:Mighty.Npgsql.NpgsqlDereferencingReader.#ctor(System.Data.Common.DbDataReader,System.Data.CommandBehavior,System.Data.Common.DbConnection,System.Object)">
            <summary>
            Create a safe, sensible dereferencing reader; we have already checked that there are at least some cursors to dereference at this point.
            </summary>
            <param name="reader">The original reader for the undereferenced query.</param>
            <param name="behavior">The required <see cref="T:System.Data.CommandBehavior"/></param>
            <param name="connection">The connection to use</param>
            <param name="mighty">The owning Mighty instance</param>
            <remarks>
            FETCH ALL is genuinely useful in some situations (e.g. if using (abusing?) cursors to return small or medium sized multiple result
            sets then we can and do save one round trip to the database overall: n cursors round trips, rather than n cursors plus one), but since
            it is badly problematic in the case of large cursors we force the user to request it explicitly.
            https://github.com/npgsql/npgsql/issues/438
            http://stackoverflow.com/questions/42292341/
            </remarks>
        </member>
        <member name="M:Mighty.Npgsql.NpgsqlDereferencingReader.CanDereference(System.Data.Common.DbDataReader)">
            <summary>
            True iff current reader has cursors in its output types.
            </summary>
            <param name="reader">The reader to check</param>
            <returns>Are there cursors?</returns>
            <remarks>Really a part of NpgsqlDereferencingReader</remarks>
        </member>
        <member name="M:Mighty.Npgsql.NpgsqlDereferencingReader.FetchSQL">
            <summary>
            SQL to fetch required count from current cursor
            </summary>
            <returns>SQL</returns>
        </member>
        <member name="M:Mighty.Npgsql.NpgsqlDereferencingReader.CloseSQL">
            <summary>
            SQL to close current cursor
            </summary>
            <returns>SQL</returns>
        </member>
        <member name="M:Mighty.Npgsql.NpgsqlDereferencingReader.CloseCursor(System.Boolean)">
            <summary>
            Close current FETCH cursor on the database
            </summary>
            <param name="ExecuteNow">Iff false then return the SQL but don't execute the command</param>
            <returns>The SQL to close the cursor, if there is one and this has not already been executed.</returns>
        </member>
        <member name="M:Mighty.Npgsql.NpgsqlDereferencingReader.Init">
            <summary>
            Initialise the reader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.Npgsql.NpgsqlDereferencingReader.FetchNextNFromCursor(System.String)">
            <summary>
            Fetch next N rows from current cursor.
            </summary>
            <param name="closePreviousSQL">SQL to prepend, to close the previous cursor in a single round trip (optional).</param>
        </member>
        <member name="T:Mighty.ObjectExtensions">
            <summary>
            Mighty object extension methods.
            </summary>
            <remarks>
            There is no strict need to make any of these extensions public;
            making some of them public turns them into utilty methods which are provided as part of Mighty.
            (Note that access modifiers on extension methods are relative to the package they are *defined* in,
            not relative to the package which they extend.)
            At the moment <see cref="M:Mighty.ObjectExtensions.ToExpando(System.Object)"/> and <see cref="M:Mighty.ObjectExtensions.ToDictionary(System.Dynamic.ExpandoObject)"/> are the only public extension methods.
            </remarks>
        </member>
        <member name="M:Mighty.ObjectExtensions.ToExpando(System.Object)">
            <summary>
            Convert arbitrary name-value object or collection to an <see cref="T:System.Dynamic.ExpandoObject"/>
            </summary>
            <param name="o">The <see cref="T:System.Dynamic.ExpandoObject"/></param>
            <returns></returns>
        </member>
        <member name="M:Mighty.ObjectExtensions.ToDictionary(System.Dynamic.ExpandoObject)">
            <summary>
            Convert <see cref="T:System.Dynamic.ExpandoObject"/> to dictionary.
            </summary>
            <param name="o">The <see cref="T:System.Dynamic.ExpandoObject"/></param>
            <returns></returns>
            <remarks>
            Not sure whether this is really useful or not... syntax is nicer and saves a little typing, even though functionality is obviously very simple.
            Hopefully compiler removes any apparent inefficiency.
            In theory this could work for other dynamic types, not just ExpandoObject (with argument type of <see cref="T:System.Object"/> or
            <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/>), but MightyOrm itself implements that interface, and we don't really want this
            method to appear in IntelliSense in places where it doesn't make sense.
            </remarks>
        </member>
        <member name="M:Mighty.ObjectExtensions.Thingify(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Enforce existence of non-existence of string (e.g. "WHERE", "ORDER BY") at start of SQL fragment
            </summary>
            <param name="sql">The original fragment</param>
            <param name="thing">The string to enforce</param>
            <param name="yes">If true the string is added if not there ('thingify'); if false it is removed if there ('unthingify')</param>
            <param name="compulsory">The user must have provided *some* fragment at this point</param>
            <param name="op">The name of what is happening, for expceptions if the user has provided no fragment</param>
            <param name="addSpace">insert initial space?</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.ObjectExtensions.GetDefaultValue(System.Type)">
             <remarks>
             This supports all the types listed in ADO.NET DbParameter type-inference documentation https://msdn.microsoft.com/en-us/library/yy6y35y8(v=vs.110).aspx , except for byte[] and Object.
             Although this method supports all these types, the various ADO.NET providers do not:
             None of the providers support DbType.UInt16/32/64; Oracle and Postgres do not support DbType.Guid or DbType.Boolean.
             Setting DbParameter DbType or Value to one of the per-provider non-supported types will produce an ArgumentException
             (immediately on Postgres and Oracle, at DbCommand execution time on SQL Server).
             The per-database method DbParameter.SetValue is the place to add code to convert these non-supported types to supported types.
            
             Not sure whether this should be public...?
             </remarks>
        </member>
        <member name="T:Mighty.PagedResults`1">
            <summary>
            The results from a paging query
            </summary>
            <typeparam name="T">The generic type for items returned by this instance</typeparam>
        </member>
        <member name="F:Mighty.PagedResults`1.Items">
            <summary>
            The requested page of items
            </summary>
        </member>
        <member name="F:Mighty.PagedResults`1.TotalRecords">
            <summary>
            The total number of pages available
            </summary>
        </member>
        <member name="F:Mighty.PagedResults`1.TotalPages">
            <summary>
            The total number of items available
            </summary>
        </member>
        <member name="P:Mighty.Parameters.LazyNameValueTypeInfo.Name">
            <summary>
            The parameter name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mighty.Parameters.LazyNameValueTypeInfo.Value">
            <summary>
            The parameter value; lazy evaluated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mighty.Parameters.LazyNameValueTypeInfo.Type">
            <summary>
            The parameter type; can be explicitly specified or lazily evaluated from the parameter value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.Parameters.LazyNameValueTypeInfo.#ctor(System.String,System.Func{System.Object},System.Type)">
            <summary>
            Object to help with unpacking names, values and types from arbitrary objects or collections.
            </summary>
            <param name="name">Name</param>
            <param name="lazyValue">Function to lazily evaluate value</param>
            <param name="type">Type (if available)</param>
        </member>
        <member name="T:Mighty.Parameters.NameValueTypeEnumerator">
            <remarks>
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> *is* supported in .NET Core 1.1, but got a bit lost:
            https://github.com/dotnet/corefx/issues/10338
            For folks that hit missing types from one of these packages after upgrading to Microsoft.NETCore.UniversalWindowsPlatform they can reference the packages directly as follows.
            "System.Collections.NonGeneric": "4.0.1",
            "System.Collections.Specialized": "4.0.1", ****
            "System.Threading.Overlapped": "4.0.1",
            "System.Xml.XmlDocument": "4.0.1"
            </remarks>
        </member>
        <member name="M:Mighty.Parameters.NameValueTypeEnumerator.HasNames">
            <summary>
            Determine whether the passed in type can provide names as well as values
            </summary>
            <remarks>NB The logic of this must match <see cref="M:Mighty.Parameters.NameValueTypeEnumerator.GetEnumerator"/> below</remarks>
        </member>
        <member name="M:Mighty.Parameters.NameValueTypeEnumerator.GetEnumerator">
            <summary>
            Enumerate over names and values, or just values, from passed in object
            </summary>
            <remarks>NB The logic of this must match <see cref="M:Mighty.Parameters.NameValueTypeEnumerator.HasNames"/> above</remarks>
        </member>
        <member name="T:Mighty.Plugins.PagingQueryPair">
            <summary>
            Class used to return the two queries necessary to do a paged select and a total count.
            </summary>
        </member>
        <member name="F:Mighty.Plugins.PagingQueryPair.CountQuery">
            <summary>
            The query which will return the total count of paged items
            </summary>
        </member>
        <member name="F:Mighty.Plugins.PagingQueryPair.PagingQuery">
            <summary>
            The query which will return the selected page of items
            </summary>
        </member>
        <member name="T:Mighty.Plugins.PluginBase">
            <summary>
            Implement this abstract class in order to add support for a new database type to Mighty.
            </summary>
            <remarks>
            We're trying to put as much shared code as possible in here, while
            maintaining reasonable readability.
            </remarks>
        </member>
        <member name="F:Mighty.Plugins.PluginBase.CRLF">
            <summary>
            CRLF for use in generating SQL (all SQL is generated in Windows CRLF format on all platforms, currently)
            </summary>
        </member>
        <member name="P:Mighty.Plugins.PluginBase.Mighty">
            <summary>
            The instance which we are plugged in to (as dynamic to avoid having to dynamically type everything about the database plugin classes)
            </summary>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.GetProviderFactoryClassName(System.String)">
             <summary>
             Returns the provider factory class name for the known provider(s) for this DB;
             should simply return null if the plugin does not know that it can support the
             named provider.
            
             There is no C# syntax to enforce sub-classes of DatabasePlugin to provide a static method with this name,
             but they must do so (failure to do so results in a runtime exception).
            
             If you wan't to create a plugin for an unknown provider for a known database, subclass the existing plugin
             for that database and provide your own implementation of just this method. Then either call
             <see cref="M:Mighty.Plugins.PluginManager.RegisterPlugin(System.Type)"/> to register the plugin for use with extended connection
             strings, or pass it to the MightyOrm constructor using your own sub-class of <see cref="T:Mighty.ConnectionProviders.ConnectionProvider"/>.
             </summary>
             <param name="loweredProviderName">The provider name, converted to lower case</param>
             <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildSelect(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            SELECT pattern, using either LIMIT or TOP
            </summary>
            <param name="columns">Comma separated list of columns to return or "*"</param>
            <param name="tableName">The table name</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="limit">The maximum number of rows to return</param>
            <returns></returns>
            <remarks>
            It makes sense to handle this separately from paging, because the semantics of LIMIT/TOP are simpler than
            the semantics of LIMIT OFFSET/ROW_NUMBER() queries, in particular a pure LIMIT/TOP query doesn't require
            an explicit ORDER BY.
            </remarks>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildTopSelect(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            TOP SELECT pattern
            </summary>
            <param name="columns">Comma separated list of columns to return or "*"</param>
            <param name="tableName">The table name</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="limit">The maximum number of rows to return</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildLimitSelect(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            LIMIT SELECT pattern
            </summary>
            <param name="columns">Comma separated list of columns to return or "*"</param>
            <param name="tableName">The table name</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="limit">The maximum number of rows to return</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildDelete(System.String,System.String)">
            <summary>
            Is the same for every (currently supported?) database
            </summary>
            <param name="tableName">The table name</param>
            <param name="where">WHERE clause</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildInsert(System.String,System.String,System.String)">
            <summary>
            Is the same for every (currently supported?) database
            </summary>
            <param name="tableName">The table name</param>
            <param name="columns">Comma separated list of columns to return or "*"</param>
            <param name="values">The values (as SQL parameters)</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildUpdate(System.String,System.String,System.String)">
            <summary>
            Is the same for every (currently supported?) database
            </summary>
            <param name="tableName">The table name</param>
            <param name="values">The values (as SQL parameters)</param>
            <param name="where">WHERE clause</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildPagingQueryPair(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Build a single query which returns two result sets: a scalar of the total count followed by
            a normal result set of the page of items.
            Default to the LIMIT OFFSET pattern, which works exactly the same in all DBs which support it.
            </summary>
            <param name="columns">Comma separated list of columns to return or "*"</param>
            <param name="tableNameOrJoinSpec">A table name, or a complete join specification (i.e. anything you can SELECT FROM in SQL)</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">Order by is required</param>
            <param name="limit">The maximum number of rows to return (i.e. the page size)</param>
            <param name="offset">The starting row offset for the page</param>
            <returns></returns>
            <remarks>
            Has to be done as two round-trips to the DB for one main reason:
            1) The items are done using the standard yield return delayed execution, so we don't want to
                  start the reader until the results are needed, but we do want the count straight away.
            Less importantly
            2) It is difficult (though possible now, using Oracle's automatic dereferencing and the cursor
                  support in Mighty) to get at the results of multiple selects from one DB call
                  on Oracle.
            </remarks>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildLimitOffsetPagingQueryPair(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Utility method to provide LIMIT-OFFSET paging pattern.
            </summary>
            <param name="columns">Comma separated list of columns to return or "*"</param>
            <param name="tableNameOrJoinSpec">A table name, or a complete join specification (i.e. anything you can SELECT FROM in SQL)</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">ORDER BY clause</param>
            <param name="limit">The maximum number of rows to return (i.e. the page size)</param>
            <param name="offset">The starting row offset for the page</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildRowNumberPagingQueryPair(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Utility method to provide the ROW_NUMBER() paging pattern; contrary to popular belief, *exactly* the same
            pattern can be used on Oracle and SQL Server.
            </summary>
            <param name="columns">Comma separated list of columns to return or "*"</param>
            <param name="tableNameOrJoinSpec">A table name, or a complete join specification (i.e. anything you can SELECT FROM in SQL)</param>
            <param name="where">WHERE clause</param>
            <param name="orderBy">Order by is required</param>
            <param name="limit">The maximum number of rows to return (i.e. the page size)</param>
            <param name="offset">The starting row offset for the page</param>
            <returns></returns>
            <remarks>Unavoidably (without significant SQL parsing, which we do not do) adds column RowNumber to the results, which does not happen on LIMIT/OFFSET DBs</remarks>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.FixStarColumns(System.String,System.String)">
            <summary>
            Adds table name qualifer to * column spec so that basic paging query can work on Oracle (and does no harm on SQL Server).
            Throws exception for * colmns spec combined with join query (which will not work even on SQL Server).
            </summary>
            <remarks>
            Adding the qualifier to a bare table name is not required, but works, on SQL Server
            Having * on a join query won't work on SQL server, even though the syntax is valid, because it complains about multiple appearance of the join column.
            Therefore this call makes sense on both DBs.
            </remarks>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.FixupInsertCommand(System.Data.Common.DbCommand)">
            <summary>
            Required for Oracle only
            </summary>
            <param name="command">The command to execute</param>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildTableMetaDataQuery(System.String,System.String)">
            <summary>
            This is exactly the same on MySQL, PostgreSQL and SQL Server, override on the others.
            </summary>
            <param name="tableName">Table name</param>
            <param name="tableOwner">Table owner/schema, will be null if none was specified by the user</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.PostProcessTableMetaData(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            If the table info comes in the semi-standard INFORMATION_SCHEMA format (which it does, though from a
            differently named table, on Oracle as well as on the above three) then we don't need to override this;
            however, this DOES need ToList, as it is converting from delayed execution to something ready to use.
            </summary>
            <param name="results">The unprocessed table meta-data</param>
            <returns></returns>
            <remarks>
            TO DO: Just make the inner conversion function part of the plugin, not the loop.
            </remarks>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.GetColumnDefault(System.Object)">
            <summary>
            Get default value for a column - was done as a plugin method, but now the same for everything.
            </summary>
            <param name="columnInfo">The column info (which was collected from the database the first time that table meta-data was required)</param>
            <returns></returns>
            <remarks>
            Not DB-specific, and not trivial... should move into <see cref="T:Mighty.MightyOrm"/>.
            </remarks>
        </member>
        <member name="P:Mighty.Plugins.PluginBase.IsSequenceBased">
            <summary>
            Is this sequence based? If not then identity based.
            </summary>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildNextval(System.String)">
            <summary>
            Build an SQL fragment which references the next value from the named sequence
            </summary>
            <param name="sequence">The sequence</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.BuildCurrvalSelect(System.String)">
            <summary>
            Build SQL to select the current value from the named sequence
            </summary>
            <param name="sequence">The sequence</param>
            <returns></returns>
        </member>
        <member name="P:Mighty.Plugins.PluginBase.IdentityRetrievalFunction">
            <summary>
            Return the SQL fragment which retrieves the identity for the last inserted row
            </summary>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.SetProviderSpecificCommandProperties(System.Data.Common.DbCommand)">
            <summary>
            Set any provider specific properties which are required to make this database perform as expected by Mighty.
            </summary>
            <param name="command">The command to execute</param>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.PrefixParameterName(System.String,System.Data.Common.DbCommand)">
            <summary>
            Prefix a database parameter name.
            </summary>
            <param name="rawName">The unprefixed parameter name</param>
            <param name="cmd">
            The database command,
            which is required because this method
            needs to know whether this is for use in DbParameter name (cmd=null) or for escaping within the SQL fragment itself,
            and if it is for a DbParameter whether it is used for a stored procedure or for an SQL fragment.
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.DeprefixParameterName(System.String,System.Data.Common.DbCommand)">
            <summary>
            Deprefix a database parameter name.
            </summary>
            <param name="dbParamName">The prefixed parameter name</param>
            <param name="cmd">
            The database command,
            which is required because this although method
            will always be from a DbParameter, it needs to know whether it was used for
            a stored procedure or for an SQL fragment.
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.SetValue(System.Data.Common.DbParameter,System.Object)">
            <summary>
            Set the <see cref="P:System.Data.Common.DbParameter.Value"/> (and implicitly <see cref="P:System.Data.Common.DbParameter.DbType"/>) for single parameter, adding support for provider unsupported types, etc.
            </summary>
            <param name="p">The <see cref="T:System.Data.Common.DbParameter"/></param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.GetValue(System.Data.Common.DbParameter)">
            <summary>
            Get the output Value from single parameter, adding support for provider unsupported types, etc.
            </summary>
            <param name="p">The parameter</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.SetDirection(System.Data.Common.DbParameter,System.Data.ParameterDirection)">
            <summary>
            Set the ParameterDirection for single parameter, correcting for unexpected handling in specific ADO.NET providers.
            </summary>
            <param name="p">The parameter</param>
            <param name="direction">The required parameter direction</param>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.SetCursor(System.Data.Common.DbParameter,System.Object)">
            <summary>
            Set the parameter to DB specific cursor type.
            Return false if not supported on this provider.
            </summary>
            <param name="p">The parameter</param>
            <param name="value">The value (a db-specific cursor reference; typically a string containing a cursor id of some sort)</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.IsCursor(System.Data.Common.DbParameter)">
            <summary>
            Return true iff this parameter is of the DB specific cursor type.
            </summary>
            <param name="p">The parameter</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.SetAnonymousParameter(System.Data.Common.DbParameter)">
            <summary>
            Set an anonymous <see cref="T:System.Data.Common.DbParameter"/>.
            Return false if not supported on this provider.
            </summary>
            <param name="p">The parameter</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.IgnoresOutputTypes(System.Data.Common.DbParameter)">
            <summary>
            Return true iff this ADO.NET provider ignores output parameter types when generating output data types, for a given parameter.
            (To avoid forcing the user to have to provide these types if they would not have had to do so when programming
            against this provider directly.)
            </summary>
            <param name="p">The parameter</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.ExecuteDereferencingReader(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Data.Common.DbConnection)">
            <summary>
            For non-Npgsql, this just does <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/>.
            For Npgql this (optionally, depending on the value of<see cref="P:Mighty.MightyOrm`1.NpgsqlAutoDereferenceCursors"/>) returns a new <see cref="T:System.Data.Common.DbDataReader"/> which de-references
            all cursors returned by the original reader, iteratively returning those results instead.
            </summary>
            <param name="cmd">The original command</param>
            <param name="behavior">The command behaviour</param>
            <param name="conn">The connection to use</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginBase.RequiresWrappingTransaction(System.Data.Common.DbCommand)">
            <summary>
            Does this command require a wrapping transaction? This is required for some cursor-specific commands on some databases.
            If required Mighty will only create a new transaction if a user transaction or <see cref="T:System.Transactions.TransactionScope"/> is not already in place.
            </summary>
            <param name="cmd">The command to check</param>
            <returns></returns>
        </member>
        <member name="T:Mighty.Plugins.PluginManager">
            <summary>
            Register new plugins and review the registered plugins which provide Mighty support for different databases.
            </summary>
        </member>
        <member name="P:Mighty.Plugins.PluginManager.InstalledPluginTypes">
            <summary>
            Installed database plugin types.
            </summary>
            <remarks>
            I think this property doesn't need to be public, but it seems friendly/useful to make it be.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Mighty.Plugins.PluginManager.RegisterPlugin(System.Type)">
            <summary>
            Register a new database plugin for use with the <see cref="T:Mighty.ConnectionProviders.PureConnectionStringProvider"/>.
            (NB If are plan to pass the type of your own database plugin via your own subclass of
            <see cref="T:Mighty.ConnectionProviders.ConnectionProvider"/> then you do not need to register here;
            this registers unknown plugins for use with Mighty's "ProviderName=..." in ConnectionString feature.)
            <remarks>TO DO: This approach can be tested by registering an existing plugin with a silly name...</remarks>
            </summary>
            <param name="pluginType">The plugin type to register, must be a sub-class of <see cref="T:Mighty.Plugins.PluginBase"/></param>
        </member>
        <member name="M:Mighty.Plugins.PluginManager.AssembleDefaultPlugins">
            <summary>
            Use reflection to find the available plugins; only call this from inside the thread-safe initializer.
            </summary>
        </member>
        <member name="M:Mighty.Plugins.PostgreSql.ExecuteDereferencingReader(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Data.Common.DbConnection)">
            <summary>
            Dereference cursors in more or less the way which used to be supported within Npgsql itself, only now considerably improved from that removed, partial support.
            </summary>
            <param name="cmd">The command</param>
            <param name="behavior">The required command behaviour</param>
            <param name="Connection">The connection - required for deferencing</param>
            <returns>The reader, dereferenced if needed</returns>
            <remarks>
            https://github.com/npgsql/npgsql/issues/438
            http://stackoverflow.com/questions/42292341/
            </remarks>
        </member>
        <member name="M:Mighty.Plugins.PostgreSql.RequiresWrappingTransaction(System.Data.Common.DbCommand)">
            <summary>
            Returns true if this command requires a wrapping transaction.
            </summary>
            <param name="cmd">The command.</param>
            <returns>true if it requires a wrapping transaction</returns>
            <remarks>
            Only relevant to Postgres cursor dereferencing and in this case we also do some relevant pre-processing of the command.
            </remarks>
        </member>
        <member name="T:Mighty.Profiling.DataProfiler">
            <summary>
            Pass an instance of this class to the constructor of <see cref="T:Mighty.MightyOrm"/> in order to intercept
            System.Data.Common operations at any or all of the
            <see cref="T:System.Data.Common.DbProviderFactory"/>, <see cref="T:System.Data.Common.DbConnection"/> or <see cref="T:System.Data.Common.DbCommand"/> levels.
            </summary>
        </member>
        <member name="P:Mighty.Profiling.DataProfiler.FactoryWrapping">
            <summary>
            Provide your own function here to wrap at the factory level.
            </summary>
        </member>
        <member name="P:Mighty.Profiling.DataProfiler.ConnectionWrapping">
            <summary>
            Provide your own function here to wrap at the connection level.
            </summary>
        </member>
        <member name="P:Mighty.Profiling.DataProfiler.CommandWrapping">
            <summary>
            Provide your own function here to wrap at the command level.
            </summary>
        </member>
        <member name="M:Mighty.Profiling.DataProfiler.#ctor">
            <summary>
            Parameterless constructor (overriding class can use protected setters)
            </summary>
            
        </member>
        <member name="M:Mighty.Profiling.DataProfiler.#ctor(System.Func{System.Data.Common.DbProviderFactory,System.Data.Common.DbProviderFactory},System.Func{System.Data.Common.DbConnection,System.Data.Common.DbConnection},System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Mighty.RowCount">
            <summary>
            For use where you are using the WithParams or AsProcedure variant of Execute, but you still want to get the ADO.NET rowcount back amongst your return values.
            e.g. outParams: new { RowCount = new RowCount() }
            </summary>
        </member>
        <member name="T:Mighty.Validation.NullValidator">
            <summary>
            Inject this if you need to inject something for no validation.
            </summary>
        </member>
        <member name="M:Mighty.Validation.NullValidator.Validate(System.Object,System.Action{System.Object})">
            <summary>
            Passing validation (i.e. just do not modify the error list)
            </summary>
            <param name="item">The item to be validated</param>
            <param name="reportError">Call <paramref name="reportError"/>(object) to add errors to the error list. You may choose to add strings, or a more complex object if you wish.
            NB Adding one or more errors indicates that the item fails, adding no errors indicates success.</param>
        </member>
        <member name="T:Mighty.Validation.OrmAction">
            <summary>
            List of possible ORM actions.
            </summary>
        </member>
        <member name="F:Mighty.Validation.OrmAction.Save">
            <summary>Save (insert if new, update if pre-existing)</summary>
        </member>
        <member name="F:Mighty.Validation.OrmAction.Insert">
            <summary>Insert (insert new object)</summary>
        </member>
        <member name="F:Mighty.Validation.OrmAction.Update">
            <summary>Update (update existing object)</summary>
        </member>
        <member name="F:Mighty.Validation.OrmAction.Delete">
            <summary>Delete</summary>
        </member>
        <member name="T:Mighty.Validation.Prevalidation">
            <summary>
            Specifies the type of prevalidation (if any) to use in a <see cref="T:Mighty.Validation.Validator"/>.
            </summary>
        </member>
        <member name="F:Mighty.Validation.Prevalidation.Off">
            <summary>
            No prevalidation
            </summary>
        </member>
        <member name="F:Mighty.Validation.Prevalidation.Lazy">
            <summary>
            Stop prevalidation as soon as the first item fails
            </summary>
        </member>
        <member name="F:Mighty.Validation.Prevalidation.Full">
            <summary>
            Continue prevalidation for all items (so as to accumulate all errors from all items)
            </summary>
        </member>
        <member name="T:Mighty.Validation.ValidationException">
            <summary>
            This exception is thrown by Mighty when validation fails.
            </summary>
        </member>
        <member name="F:Mighty.Validation.ValidationException.ErrorList">
            <summary>
            List of validation errors
            </summary>
        </member>
        <member name="M:Mighty.Validation.ValidationException.#ctor(System.Collections.Generic.List{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="errorList">List of validation errors</param>
        </member>
        <member name="M:Mighty.Validation.ValidationException.#ctor(System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorList">List of validation errors</param>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Mighty.Validation.ValidationException.#ctor(System.Collections.Generic.List{System.Object},System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="errorList">List of validation errors</param>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Mighty.Validation.Validator">
            <summary>
            Implement this abstract class and pass an instance of it to the constructor of <see cref="T:Mighty.MightyOrm"/> to provide validation for your table items.
            Note that because almost any type of item can be passed into most Mighty commands, this validator is NOT strongly typed.
            If you know you care only going to pass items of type T, you can just add a cast to your validation methods.
            </summary>
            <remarks>
            The objects passed to the validation callbacks are whatever was passed in to Save, Insert, Delete, etc., which can always be any reasonable object
            or collection to contain the data needed for the task at hand, even when used with the generically typed version of <see cref="T:Mighty.MightyOrm`1"/>.
            I have tried implementing this using functions instead, like <see cref="T:Mighty.Mapping.SqlNamingMapper"/>, but it really doesn't work well at all,
            it is fiddly to use and set up, and the functions you send in can't (as far as I can make out?) have any XML comments explaining their arguments either.
            </remarks>
        </member>
        <member name="P:Mighty.Validation.Validator.PrevalidationType">
            <summary>
            Determine whether and how to pre-validate lists of items before performing any action.
            Default is no pre-validation. Other options are to stop after the first item which gives any error,
            or to continue and collect all errors before stopping.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mighty.Validation.Validator.ValidateForAction(Mighty.Validation.OrmAction,System.Object,System.Action{System.Object})">
            <summary>
            If prevalidation is enabled Mighty calls this one item at a time before any database actions are done;
            if any item fails, no actions are done for any item.
            This also called by the <see cref="T:Mighty.MightyOrm"/>.IsValid method.
            The default implementation of this method directly calls the `Validate` method and so ignores the <paramref name="action"/> parameter,
            but your own override can change this.
            </summary>
            <param name="action">You can choose to ignore this and do the same validation for every action.</param>
            <param name="item">
            The item to validate. NB this can be whatever you pass in as input objects, and therefore is NOT restricted to items of the generic type
            even for generically typed <see cref="T:Mighty.MightyOrm`1"/>.
            Not necessarily a representation of the item for action: e.g. for delete only, it might be a representation of just the PK depending on how `Delete` was called.
            Despite this, you can write fairly stright-forward validators; have a look at the table classes in the Mighty docs examples.
            </param>
            <param name="reportError">
            Your code should call this function, e.g. <paramref name="reportError"/>("My error text") to add errors to the error list.
            You may choose to add strings, or a more complex object if you wish.
            NB Adding one or more errors indicates that the item fails, adding no errors indicates success.
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Validation.Validator.Validate(System.Object,System.Action{System.Object})">
            <summary>
            Validate an object, for all action types.
            This is called directly by the default implementation of `ValidateForAction`, but won't automatically be called if you override that and change it.
            `ValidateForAction` in turn is called by <see cref="T:Mighty.MightyOrm`1"/>.IsValid, so IsValid will also call this unless you have overridden `ValidateForAction`.
            </summary>
            <param name="item">
            The item to validate. NB this can be whatever you pass in as input objects, it is not restricted to items of type T
            even for the generically typed <see cref="T:Mighty.MightyOrm`1"/>.
            Not necessarily a representation of the item for action: e.g. for delete only, it might be a representation of just the PK depending on how `Delete` was called.
            Despite this, you can write fairly stright-forward validators; have a look at the table classes in the Mighty docs examples.
            </param>
            <param name="reportError">
            Your code should call this function, e.g. <paramref name="reportError"/>("My error text") to add errors to the error list.
            You may choose to add strings, or a more complex object if you wish.
            NB Adding one or more errors indicates that the item fails, adding no errors indicates success.
            </param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Validation.Validator.ShouldPerformAction(System.Object,Mighty.Validation.OrmAction)">
            <summary>
            This is called one item at time, just before the processing for that specific item.
            <see cref="T:Mighty.Validation.OrmAction"/> is performed iff this returns true. If false is returned, no processing
            is done for this item, but processing still continues for all remaining items.
            </summary>
            <param name="item">The item for which the action is about to be performed.
            The type of this is NOT normalised, and depends on what you pass in.</param>
            <param name="action">The ORM action</param>
            <returns></returns>
        </member>
        <member name="M:Mighty.Validation.Validator.HasPerformedAction(System.Object,Mighty.Validation.OrmAction)">
            <summary>
            This is called one item at time, after processing for that specific item.
            </summary>
            <param name="item">The item for which the action has just been performed.
            The type of this is NOT normalised, and depends on what you pass in.</param>
            <param name="action">The ORM action</param>
            <returns></returns>
        </member>
    </members>
</doc>
